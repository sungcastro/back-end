{"version":3,"file":"bundle.min.js","sources":["../../types/src/index.ts","../../utils/src/is.ts","../../utils/src/misc.ts","../../utils/src/memo.ts","../../utils/src/string.ts","../../utils/src/object.ts","../../hub/src/scope.ts","../../utils/src/logger.ts","../../hub/src/hub.ts","../../minimal/src/index.ts","../../core/src/error.ts","../../core/src/dsn.ts","../../core/src/api.ts","../../core/src/integration.ts","../../core/src/promisebuffer.ts","../../core/src/interfaces.ts","../../core/src/baseclient.ts","../../utils/src/async.ts","../../core/src/transports/noop.ts","../../core/src/basebackend.ts","../../core/src/integrations/dedupe.ts","../../core/src/integrations/functiontostring.ts","../../core/src/integrations/sdkinformation.ts","../../core/src/integrations/inboundfilters.ts","../../core/src/integrations/extraerrordata.ts","../../core/src/integrations/pluggable/debug.ts","../../utils/src/path.ts","../../core/src/integrations/pluggable/rewriteframes.ts","../../utils/src/supports.ts","../src/md5.ts","../src/tracekit.ts","../src/parsers.ts","../src/transports/base.ts","../src/integrations/helpers.ts","../src/transports/fetch.ts","../src/transports/xhr.ts","../src/transports/beacon.ts","../src/backend.ts","../src/version.ts","../src/client.ts","../src/integrations/globalhandlers.ts","../src/integrations/trycatch.ts","../src/integrations/breadcrumbs.ts","../src/integrations/linkederrors.ts","../src/integrations/pluggable/reportingobserver.ts","../src/integrations/useragent.ts","../src/integrations/pluggable/ember.ts","../src/integrations/pluggable/vue.ts","../src/sdk.ts","../src/index.ts","../../core/src/sdk.ts"],"sourcesContent":["/** Supported Sentry transport protocols in a Dsn. */\nexport type DsnProtocol = 'http' | 'https';\n\n/** Primitive components of a Dsn. */\nexport interface DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  protocol: DsnProtocol;\n  /** Public authorization key. */\n  user: string;\n  /** Private authorization key (deprecated, optional). */\n  pass?: string;\n  /** Hostname of the Sentry instance. */\n  host: string;\n  /** Port of the Sentry instance. */\n  port?: string;\n  /** Sub path/ */\n  path?: string;\n  /** Project ID */\n  projectId: string;\n}\n\n/** Anything that can be parsed into a Dsn. */\nexport type DsnLike = string | DsnComponents;\n\n/** JSDoc */\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n\n/** JSDoc */\nexport interface Breadcrumb {\n  type?: string;\n  level?: Severity;\n  event_id?: string;\n  category?: string;\n  message?: string;\n  data?: any;\n  timestamp?: number;\n}\n\n/** JSDoc */\nexport interface User {\n  [key: string]: any;\n  id?: string;\n  ip_address?: string;\n  email?: string;\n  username?: string;\n}\n\n/** JSDoc */\nexport interface SdkInfo {\n  name: string;\n  version: string;\n  integrations?: string[];\n  packages?: Package[];\n}\n\n/** JSDoc */\nexport interface Package {\n  name: string;\n  version: string;\n}\n\n/** JSDoc */\nexport interface StackFrame {\n  filename?: string;\n  function?: string;\n  module?: string;\n  platform?: string;\n  lineno?: number;\n  colno?: number;\n  abs_path?: string;\n  context_line?: string;\n  pre_context?: string[];\n  post_context?: string[];\n  in_app?: boolean;\n  vars?: { [key: string]: any };\n}\n\n/** JSDoc */\nexport interface Stacktrace {\n  frames?: StackFrame[];\n  frames_omitted?: [number, number];\n}\n\n/** JSDoc */\nexport interface Thread {\n  id?: number;\n  name?: string;\n  stacktrace?: Stacktrace;\n  crashed?: boolean;\n  current?: boolean;\n}\n\n/** JSDoc */\nexport interface SentryException {\n  type?: string;\n  value?: string;\n  module?: string;\n  thread_id?: number;\n  stacktrace?: Stacktrace;\n}\n\n/** JSDoc */\nexport interface Request {\n  url?: string;\n  method?: string;\n  data?: any;\n  query_string?: string;\n  cookies?: { [key: string]: string };\n  env?: { [key: string]: string };\n  headers?: { [key: string]: string };\n}\n\n/** JSDoc */\nexport interface SentryEvent {\n  event_id?: string;\n  message?: string;\n  timestamp?: number;\n  level?: Severity;\n  platform?: string;\n  logger?: string;\n  server_name?: string;\n  release?: string;\n  dist?: string;\n  environment?: string;\n  sdk?: SdkInfo;\n  request?: Request;\n  transaction?: string;\n  modules?: { [key: string]: string };\n  fingerprint?: string[];\n  exception?: {\n    values?: SentryException[];\n    mechanism?: Mechanism;\n  };\n  stacktrace?: Stacktrace;\n  breadcrumbs?: Breadcrumb[];\n  contexts?: { [key: string]: object };\n  tags?: { [key: string]: string };\n  extra?: { [key: string]: any };\n  user?: User;\n}\n\n/** JSDoc */\nexport interface Mechanism {\n  type: string;\n  handled: boolean;\n  data?: {\n    [key: string]: string;\n  };\n}\n\n/** Integration interface */\nexport interface Integration {\n  /**\n   * Returns {@link IntegrationClass.id}\n   */\n  name: string;\n  // TODO: Remove with v5\n  /** @deprecated */\n  install?(options?: object): void;\n\n  // This takes no options on purpose, options should be passed in the constructor\n  setupOnce(): void; // TODO: make not optional\n}\n\n/** Integration Class Interface */\nexport interface IntegrationClass<T> {\n  new (): T;\n  /**\n   * Property that holds the integration name\n   */\n  id: string;\n}\n\n/** JSDoc */\nexport interface SentryResponse {\n  status: Status;\n  event?: SentryEvent;\n  reason?: string;\n}\n\n/** JSDoc */\nexport interface TransportOptions {\n  [key: string]: any;\n  /** Sentry DSN */\n  dsn: DsnLike;\n  /** Define custom headers */\n  headers?: object;\n  /** Set a HTTP proxy that should be used for outbound requests. */\n  httpProxy?: string;\n  /** Set a HTTPS proxy that should be used for outbound requests. */\n  httpsProxy?: string;\n  /** HTTPS proxy certificates path */\n  caCerts?: string;\n}\n\n/** Transport used sending data to Sentry */\nexport interface Transport {\n  /**\n   * Sends the body to the Store endpoint in Sentry.\n   *\n   * @param body String body that should be sent to Sentry.\n   */\n  sendEvent(body: string): Promise<SentryResponse>;\n\n  /**\n   * Call this function to wait until all pending requests have been sent.\n   *\n   * @param timeout Number time in ms to wait until the buffer is drained.\n   */\n  close(timeout?: number): Promise<boolean>;\n\n  // TODO: Remove with v5\n  /** @deprecated Implement sendEvent instead */\n  captureEvent?(event: SentryEvent): Promise<SentryResponse>;\n}\n\n/** JSDoc */\nexport interface TransportClass<T extends Transport> {\n  new (options: TransportOptions): T;\n}\n\n/** The status of an event. */\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n\n/** JSDoc */\nexport interface SentryWrappedFunction extends Function {\n  [key: string]: any;\n  __sentry__?: boolean;\n  __sentry_wrapped__?: SentryWrappedFunction;\n  __sentry_original__?: SentryWrappedFunction;\n}\n\n/** JSDoc */\nexport interface SentryEventHint {\n  event_id?: string;\n  syntheticException?: Error | null;\n  originalException?: Error | null;\n  data?: any;\n}\n\n/** JSDoc */\nexport interface SentryBreadcrumbHint {\n  [key: string]: any;\n}\n","/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return wat instanceof Error;\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is an undefined\n * {@link isUndefined}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isUndefined(wat: any): boolean {\n  return wat === void 0;\n}\n\n/**\n * Checks whether given value's type is a function\n * {@link isFunction}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isFunction(wat: any): boolean {\n  return typeof wat === 'function';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): boolean {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an array\n * {@link isArray}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isArray(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Array]';\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value's type is a NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: any): boolean {\n  return wat !== wat;\n}\n","import { SentryEvent, SentryWrappedFunction } from '@sentry/types';\nimport { isString } from './is';\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\nexport function dynamicRequire(mod: NodeModule, request: string): any {\n  return mod.require(request);\n}\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // tslint:disable:strict-type-predicates\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\n// tslint:disable:strict-type-predicates\nexport function getGlobalObject(): Window | NodeJS.Global | {} {\n  return isNodeEnv() ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {};\n}\n// tslint:enable:strict-type-predicates\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // tslint:disable-next-line:no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // tslint:disable-next-line:no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  } else {\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n      // tslint:disable-next-line:no-bitwise\n      const r = (Math.random() * 16) | 0;\n      // tslint:disable-next-line:no-bitwise\n      const v = c === 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: Node): string {\n  let currentElem: Node | null = elem;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  const MAX_OUTPUT_LEN = 80;\n  const out = [];\n  let height = 0;\n  let len = 0;\n  const separator = ' > ';\n  const sepLength = separator.length;\n  let nextStr;\n\n  while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n    nextStr = htmlElementAsString(currentElem as HTMLElement);\n    // bail out if\n    // - nextStr is the 'html' element\n    // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n    //   (ignore this limit if we are on the first iteration)\n    if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n      break;\n    }\n\n    out.push(nextStr);\n\n    len += nextStr.length;\n    currentElem = currentElem.parentNode;\n  }\n\n  return out.reverse().join(separator);\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlElementAsString(elem: HTMLElement): string {\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const attrWhitelist = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: SentryEvent): string {\n  if (event.message) {\n    return event.message;\n  } else if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    } else {\n      return exception.type || exception.value || event.event_id || '<unknown>';\n    }\n  } else {\n    return event.event_id || '<unknown>';\n  }\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject() as Window;\n  const levels = ['debug', 'info', 'warn', 'error', 'log'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    if (level in global.console && (originalConsole[level] as SentryWrappedFunction).__sentry__) {\n      wrappedLevels[level] = (originalConsole[level] as SentryWrappedFunction).__sentry_wrapped__;\n      originalConsole[level] = (originalConsole[level] as SentryWrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n","// tslint:disable:no-unsafe-any\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly inner: any;\n\n  public constructor() {\n    // tslint:disable-next-line\n    this.hasWeakSet = typeof WeakSet === 'function';\n    this.inner = this.hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this.hasWeakSet) {\n      if (this.inner.has(obj)) {\n        return true;\n      }\n      this.inner.add(obj);\n      return false;\n    } else {\n      for (const value of this.inner) {\n        if (value === obj) {\n          return true;\n        }\n      }\n      this.inner.push(obj);\n      return false;\n    }\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this.hasWeakSet) {\n      this.inner.delete(obj);\n    } else {\n      for (let i = 0; i < this.inner.length; i++) {\n        if (this.inner[i] === obj) {\n          this.inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","import { isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (max === 0 || !isString(str)) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    colno = ll; // tslint:disable-line:no-parameter-reassignment\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // tslint:disable-next-line\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if given value is included in the target\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill\n * @param target source string\n * @param search string to be looked for\n * @returns An answer\n */\nexport function includes(target: string, search: string): boolean {\n  if (search.length > target.length) {\n    return false;\n  } else {\n    return target.indexOf(search) !== -1;\n  }\n}\n","import { SentryWrappedFunction } from '@sentry/types';\nimport { isArray, isNaN, isPlainObject, isPrimitive, isUndefined } from './is';\nimport { Memo } from './memo';\nimport { truncate } from './string';\n\n/**\n * Just an Error object with arbitrary attributes attached to it.\n */\ninterface ExtendedError extends Error {\n  [key: string]: any;\n}\n\n/**\n * Serializes the given object into a string.\n * Like JSON.stringify, but doesn't throw on circular references.\n *\n * @param object A JSON-serializable object.\n * @returns A string containing the serialized object.\n */\nexport function serialize<T>(object: T): string {\n  return JSON.stringify(object, serializer({ normalize: false }));\n}\n\n/**\n * Deserializes an object from a string previously serialized with\n * {@link serialize}.\n *\n * @param str A serialized object.\n * @returns The deserialized object.\n */\nexport function deserialize<T>(str: string): T {\n  return JSON.parse(str) as T;\n}\n\n/**\n * Creates a deep copy of the given object.\n *\n * The object must be serializable, i.e.:\n *  - It must not contain any cycles\n *  - Only primitive types are allowed (object, array, number, string, boolean)\n *  - Its depth should be considerably low for performance reasons\n *\n * @param object A JSON-serializable object.\n * @returns The object clone.\n */\nexport function clone<T>(object: T): T {\n  return deserialize(serialize(object));\n}\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\n\nexport function fill(source: { [key: string]: any }, name: string, replacement: (...args: any[]) => any): void {\n  if (!(name in source) || (source[name] as SentryWrappedFunction).__sentry__) {\n    return;\n  }\n  const original = source[name] as () => any;\n  const wrapped = replacement(original) as SentryWrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof wrapped === 'function') {\n    wrapped.prototype = {};\n    Object.defineProperties(wrapped, {\n      __sentry__: {\n        enumerable: false,\n        value: true,\n      },\n      __sentry_original__: {\n        enumerable: false,\n        value: original,\n      },\n      __sentry_wrapped__: {\n        enumerable: false,\n        value: wrapped,\n      },\n    });\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(\n      // tslint:disable-next-line:no-unsafe-any\n      key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`,\n    )\n    .join('&');\n}\n\n// Default Node.js REPL depth\nconst MAX_SERIALIZE_EXCEPTION_DEPTH = 3;\n// 100kB, as 200kB is max payload size, so half sounds reasonable\nconst MAX_SERIALIZE_EXCEPTION_SIZE = 100 * 1024;\nconst MAX_SERIALIZE_KEYS_LENGTH = 40;\n\n/** JSDoc */\nfunction utf8Length(value: string): number {\n  // tslint:disable-next-line:no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** JSDoc */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nfunction serializeValue<T>(value: T): T | string {\n  const type = Object.prototype.toString.call(value);\n\n  if (typeof value === 'string') {\n    return truncate(value, 40);\n  } else if (type === '[object Object]') {\n    // Node.js REPL notation\n    return '[Object]';\n  } else if (type === '[object Array]') {\n    // Node.js REPL notation\n    return '[Array]';\n  } else {\n    return normalizeValue(value) as T;\n  }\n}\n\n/** JSDoc */\nexport function serializeObject<T>(value: T, depth: number): T | string | {} {\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  if (isPlainObject(value)) {\n    const serialized: { [key: string]: any } = {};\n    const val = value as {\n      [key: string]: any;\n    };\n\n    Object.keys(val).forEach((key: string) => {\n      serialized[key] = serializeObject(val[key], depth - 1);\n    });\n\n    return serialized;\n  } else if (isArray(value)) {\n    const val = (value as any) as T[];\n    return val.map(v => serializeObject(v, depth - 1));\n  }\n\n  return serializeValue(value);\n}\n\n/** JSDoc */\nexport function limitObjectDepthToSize<T>(\n  object: { [key: string]: any },\n  depth: number = MAX_SERIALIZE_EXCEPTION_DEPTH,\n  maxSize: number = MAX_SERIALIZE_EXCEPTION_SIZE,\n): T {\n  const serialized = serializeObject(object, depth);\n\n  if (jsonSize(serialize(serialized)) > maxSize) {\n    return limitObjectDepthToSize(object, depth - 1);\n  }\n\n  return serialized as T;\n}\n\n/** JSDoc */\nexport function serializeKeysToEventMessage(keys: string[], maxLength: number = MAX_SERIALIZE_KEYS_LENGTH): string {\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\n/** JSDoc */\nexport function assign(target: any, ...args: any[]): object {\n  if (target === null || target === undefined) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const to = Object(target) as {\n    [key: string]: any;\n  };\n\n  // tslint:disable-next-line\n  for (let i = 0; i < args.length; i++) {\n    const source = args[i];\n    if (source !== null) {\n      for (const nextKey in source as {\n        [key: string]: any;\n      }) {\n        if (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n          to[nextKey] = (source as {\n            [key: string]: any;\n          })[nextKey];\n        }\n      }\n    }\n  }\n\n  return to;\n}\n\n/**\n * Transforms Error object into an object literal with all it's attributes\n * attached to it.\n *\n * Based on: https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106\n *\n * @param error An Error containing all relevant information\n * @returns An object with all error properties\n */\nfunction objectifyError(error: ExtendedError): object {\n  // These properties are implemented as magical getters and don't show up in `for-in` loop\n  const err: {\n    stack: string | undefined;\n    message: string;\n    name: string;\n    [key: string]: any;\n  } = {\n    message: error.message,\n    name: error.name,\n    stack: error.stack,\n  };\n\n  for (const i in error) {\n    if (Object.prototype.hasOwnProperty.call(error, i)) {\n      err[i] = error[i];\n    }\n  }\n\n  return err;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue(value: any, key?: any): any {\n  if (key === 'domain' && typeof value === 'object' && (value as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && value === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && value === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && value === document) {\n    return '[Document]';\n  }\n\n  if (value instanceof Date) {\n    return `[Date] ${value}`;\n  }\n\n  if (value instanceof Error) {\n    return objectifyError(value);\n  }\n\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof Event !== 'undefined' && value instanceof Event) {\n    return Object.getPrototypeOf(value) ? value.constructor.name : 'Event';\n  }\n\n  if (isNaN(value)) {\n    return '[NaN]';\n  }\n\n  if (isUndefined(value)) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${(value as () => void).name || '<unknown-function-name>'}]`;\n  }\n\n  return value;\n}\n\n/**\n * Decycles an object to make it safe for json serialization.\n *\n * @param obj Object to be decycled\n * @param memo Optional Memo class handling decycling\n */\nexport function decycle(obj: any, memo: Memo = new Memo()): any {\n  // tslint:disable-next-line:no-unsafe-any\n  const copy = isArray(obj) ? [...obj] : isPlainObject(obj) ? { ...obj } : obj;\n\n  if (!isPrimitive(obj)) {\n    if (memo.memoize(obj)) {\n      return '[Circular ~]';\n    }\n    // tslint:disable-next-line\n    for (const key in obj) {\n      // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n      if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n        continue;\n      }\n      // tslint:disable-next-line\n      copy[key] = decycle(obj[key], memo);\n    }\n    memo.unmemoize(obj);\n  }\n\n  return copy;\n}\n\n/**\n * serializer()\n *\n * Remove circular references,\n * translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * and takes care of Error objects serialization\n */\nfunction serializer(options: { normalize: boolean } = { normalize: true }): (key: string, value: any) => any {\n  // tslint:disable-next-line\n  return (key: string, value: object) => (options.normalize ? normalizeValue(decycle(value), key) : decycle(value));\n}\n\n/**\n * safeNormalize()\n *\n * Creates a copy of the input by applying serializer function on it and parsing it back to unify the data\n */\nexport function safeNormalize(input: any): any {\n  try {\n    return JSON.parse(JSON.stringify(input, serializer({ normalize: true })));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n","import { Breadcrumb, SentryEvent, SentryEventHint, Severity, User } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\nimport { assign, safeNormalize } from '@sentry/utils/object';\n\nexport type EventProcessor = (\n  event: SentryEvent,\n  hint?: SentryEventHint,\n) => Promise<SentryEvent | null> | SentryEvent | null;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope {\n  /** Flag if notifiying is happening. */\n  protected notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected user: User = {};\n\n  /** Tags */\n  protected tags: { [key: string]: string } = {};\n\n  /** Extra */\n  protected extra: { [key: string]: any } = {};\n\n  /** Fingerprint */\n  protected fingerprint?: string[];\n\n  /** Severity */\n  protected level?: Severity;\n\n  /** Add internal on change listener. */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this.scopeListeners.push(callback);\n  }\n\n  /** Add new event processor that will be called after {@link applyToEvent}. */\n  public addEventProcessor(callback: EventProcessor): Scope {\n    this.eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected notifyScopeListeners(): void {\n    if (!this.notifyingListeners) {\n      this.notifyingListeners = true;\n      setTimeout(() => {\n        this.scopeListeners.forEach(callback => {\n          callback(this);\n        });\n        this.notifyingListeners = false;\n      });\n    }\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected async notifyEventProcessors(event: SentryEvent, hint?: SentryEventHint): Promise<SentryEvent | null> {\n    let processedEvent: SentryEvent | null = event;\n    for (const processor of [...getGlobalEventProcessors(), ...this.eventProcessors]) {\n      try {\n        processedEvent = await processor({ ...processedEvent }, hint);\n        if (processedEvent === null) {\n          return null;\n        }\n      } catch (e) {\n        continue;\n      }\n    }\n    return processedEvent;\n  }\n\n  /**\n   * Updates user context information for future events.\n   * @param user User context object to merge into current context.\n   */\n  public setUser(user: User): Scope {\n    this.user = safeNormalize(user);\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Updates tags context information for future events.\n   * @param tags Tags context object to merge into current context.\n   */\n  public setTag(key: string, value: string): Scope {\n    this.tags = { ...this.tags, [key]: safeNormalize(value) };\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Updates extra context information for future events.\n   * @param extra context object to merge into current context.\n   */\n  public setExtra(key: string, extra: any): Scope {\n    this.extra = { ...this.extra, [key]: safeNormalize(extra) };\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param fingerprint string[] to group events in Sentry.\n   */\n  public setFingerprint(fingerprint: string[]): Scope {\n    this.fingerprint = safeNormalize(fingerprint);\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   * @param level string {@link Severity}\n   */\n  public setLevel(level: Severity): Scope {\n    this.level = safeNormalize(level);\n    this.notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    assign(newScope, scope, {\n      scopeListeners: [],\n    });\n    if (scope) {\n      newScope.extra = assign(scope.extra);\n      newScope.tags = assign(scope.tags) as any;\n      newScope.breadcrumbs = [...scope.breadcrumbs];\n      newScope.eventProcessors = [...scope.eventProcessors];\n    }\n    return newScope;\n  }\n\n  /** Clears the current scope and resets its properties. */\n  public clear(): void {\n    this.breadcrumbs = [];\n    this.tags = {};\n    this.extra = {};\n    this.user = {};\n    this.level = undefined;\n    this.fingerprint = undefined;\n    this.notifyScopeListeners();\n  }\n\n  /**\n   * Sets the breadcrumbs in the scope\n   * @param breadcrumbs Breadcrumb\n   * @param maxBreadcrumbs number of max breadcrumbs to merged into event.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): void {\n    this.breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this.breadcrumbs, safeNormalize(breadcrumb)].slice(-maxBreadcrumbs)\n        : [...this.breadcrumbs, safeNormalize(breadcrumb)];\n    this.notifyScopeListeners();\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private applyFingerprint(event: SentryEvent): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this.fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this.fingerprint);\n    } else if (event.message) {\n      // If not, but we have message, use it instead\n      event.fingerprint = event.fingerprint.concat(event.message);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event SentryEvent\n   * @param hint May contain additional informartion about the original exception.\n   * @param maxBreadcrumbs number of max breadcrumbs to merged into event.\n   */\n  public async applyToEvent(\n    event: SentryEvent,\n    hint?: SentryEventHint,\n    maxBreadcrumbs?: number,\n  ): Promise<SentryEvent | null> {\n    if (this.extra && Object.keys(this.extra).length) {\n      event.extra = { ...this.extra, ...event.extra };\n    }\n    if (this.tags && Object.keys(this.tags).length) {\n      event.tags = { ...this.tags, ...event.tags };\n    }\n    if (this.user && Object.keys(this.user).length) {\n      event.user = { ...this.user, ...event.user };\n    }\n    if (this.level) {\n      event.level = this.level;\n    }\n\n    this.applyFingerprint(event);\n\n    const hasNoBreadcrumbs = !event.breadcrumbs || event.breadcrumbs.length === 0;\n    if (hasNoBreadcrumbs && this.breadcrumbs.length > 0) {\n      event.breadcrumbs =\n        maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n          ? this.breadcrumbs.slice(-maxBreadcrumbs)\n          : this.breadcrumbs;\n    }\n\n    return this.notifyEventProcessors(event, hint);\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  const global: any = getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","import { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject() as Window;\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this.enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this.enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this.enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this.enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`Sentry Logger [Log]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this.enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`Sentry Logger [Warn]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this.enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`Sentry Logger [Error]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n}\n\nconst logger = new Logger();\n\nexport { logger };\n","import {\n  Breadcrumb,\n  Integration,\n  IntegrationClass,\n  SentryBreadcrumbHint,\n  SentryEvent,\n  SentryEventHint,\n  Severity,\n} from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { dynamicRequire, getGlobalObject, uuid4 } from '@sentry/utils/misc';\nimport { Carrier, Layer } from './interfaces';\nimport { Scope } from './scope';\n\ndeclare module 'domain' {\n  export let active: Domain;\n  /**\n   * Extension for domain interface\n   */\n  export interface Domain {\n    __SENTRY__?: Carrier;\n  }\n}\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be incresed when the global interface\n * changes a and new methods are introduced.\n */\nexport const API_VERSION = 3;\n\n/**\n * Internal class used to make sure we always have the latest internal functions\n * working in case we have a version conflict.\n */\nexport class Hub {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly stack: Layer[] = [];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: any, scope: Scope = new Scope(), private readonly version: number = API_VERSION) {\n    this.stack.push({ client, scope });\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client/client.\n   * @param args Arguments to pass to the client/frontend.\n   */\n  private invokeClient(method: string, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      top.client[method](...args, top.scope);\n    }\n  }\n\n  /**\n   * Internal helper function to call an async method on the top client if it\n   * exists.\n   *\n   * @param method The method to call on the client/client.\n   * @param args Arguments to pass to the client/frontend.\n   */\n  private invokeClientAsync(method: string, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      top.client[method](...args, top.scope).catch((err: any) => {\n        logger.error(err);\n      });\n    }\n  }\n\n  /**\n   * Checks if this hub's version is older than the given version.\n   *\n   * @param version A version number to compare to.\n   * @return True if the given version is newer; otherwise false.\n   */\n  public isOlderThan(version: number): boolean {\n    return this.version < version;\n  }\n\n  /**\n   * This binds the given client to the current scope.\n   * @param client An SDK client (client) instance.\n   */\n  public bindClient(client?: any): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (top && top.scope && client) {\n      top.scope.addScopeListener((s: Scope) => {\n        if (client.getBackend) {\n          try {\n            client.getBackend().storeScope(s);\n          } catch {\n            // Do nothing\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Create a new scope to store context information.\n   *\n   * The scope will be layered on top of the current one. It is isolated, i.e. all\n   * breadcrumbs and context information added to this scope will be removed once\n   * the scope ends. Be sure to always remove this scope with {@link this.popScope}\n   * when the operation finishes or throws.\n   *\n   * @returns Scope, the new cloned scope\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const stack = this.getStack();\n    const parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;\n    const scope = Scope.clone(parentScope);\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * Removes a previously pushed scope from the stack.\n   *\n   * This restores the state before the scope was pushed. All breadcrumbs and\n   * context information added since the last call to {@link this.pushScope} are\n   * discarded.\n   */\n  public popScope(): boolean {\n    return this.getStack().pop() !== undefined;\n  }\n\n  /**\n   * Creates a new scope with and executes the given operation within.\n   * The scope is automatically removed once the operation\n   * finishes or throws.\n   *\n   * This is essentially a convenience function for:\n   *\n   *     pushScope();\n   *     callback();\n   *     popScope();\n   *\n   * @param callback that will be enclosed into push/popScope.\n   */\n  public withScope(callback: ((scope: Scope) => void)): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /** Returns the client of the top stack. */\n  public getClient(): any | undefined {\n    return this.getStackTop().client;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this.stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this.stack[this.stack.length - 1];\n  }\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * @param exception An exception-like object.\n   * @param hint May contain additional information about the original exception.\n   * @returns The generated eventId.\n   */\n  public captureException(exception: any, hint?: SentryEventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this.invokeClientAsync('captureException', exception, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * @param message The message to send to Sentry.\n   * @param level Define the level of the message.\n   * @param hint May contain additional information about the original exception.\n   * @returns The generated eventId.\n   */\n  public captureMessage(message: string, level?: Severity, hint?: SentryEventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this.invokeClientAsync('captureMessage', message, level, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   */\n  public captureEvent(event: SentryEvent, hint?: SentryEventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this.invokeClientAsync('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * This is the getter for lastEventId.\n   *\n   * @returns The last event id of a captured event.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * Records a new breadcrumb which will be attached to future events.\n   *\n   * Breadcrumbs will be added to subsequent events to provide more context on\n   * user's actions prior to an error or crash.\n   *\n   * @param breadcrumb The breadcrumb to record.\n   * @param hint May contain additional information about the original breadcrumb.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: SentryBreadcrumbHint): void {\n    this.invokeClient('addBreadcrumb', breadcrumb, { ...hint });\n  }\n\n  /**\n   * Callback to set context information onto the scope.\n   *\n   * @param callback Callback function that receives Scope.\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const top = this.getStackTop();\n    if (top.scope && top.client) {\n      // TODO: freeze flag\n      callback(top.scope);\n    }\n  }\n\n  /**\n   * For the duraction of the callback, this hub will be set as the global current Hub.\n   * This function is useful if you want to run your own client and hook into an already initialized one\n   * e.g.: Reporting issues to your own sentry when running in your component while still using the users configuration.\n   */\n  public run(callback: ((hub: Hub) => void)): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /** Returns the integration if installed on the current client. */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return this.getClient().getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n}\n\n/** Returns the global shim registry. */\nexport function getMainCarrier(): Carrier {\n  const carrier: any = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there\n  try {\n    // We need to use `dynamicRequire` because `require` on it's own will be optimized by webpack.\n    // We do not want this to happen, we need to try to `require` the domain node module and fail if we are in browser\n    // for example so we do not have to shim it and use `getCurrentHub` universally.\n    const domain = dynamicRequire(module, 'domain');\n    const activeDomain = domain.active;\n\n    // If there no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or its an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nexport function hasHubOnCarrier(carrier: any): boolean {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n */\nexport function getHubFromCarrier(carrier: any): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return carrier.__SENTRY__.hub;\n  } else {\n    carrier.__SENTRY__ = {};\n    carrier.__SENTRY__.hub = new Hub();\n    return carrier.__SENTRY__.hub;\n  }\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\nexport function setHubOnCarrier(carrier: any, hub: Hub): boolean {\n  if (!carrier) {\n    return false;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport { Breadcrumb, SentryEvent, Severity } from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // tslint:disable-next-line:no-unsafe-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\nexport function captureException(exception: any): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, level?: Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: SentryEvent): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: ((scope: Scope) => void)): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n */\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('invokeClient', method, ...args);\n}\n","/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    // tslint:disable:no-unsafe-any\n    this.name = new.target.prototype.constructor.name;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\nimport { isNaN } from '@sentry/utils/is';\nimport { assign } from '@sentry/utils/object';\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w\\.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this.fromString(from);\n    } else {\n      this.fromComponents(from);\n    }\n\n    this.validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    // tslint:disable-next-line:no-this-assignment\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n    if (!match) {\n      throw new SentryError('Invalid Dsn');\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n    assign(this, { host, pass, path, projectId, port, protocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private validate(): void {\n    for (const component of ['protocol', 'user', 'host', 'projectId']) {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`Invalid Dsn: Missing ${component}`);\n      }\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`Invalid Dsn: Unsupported protocol \"${this.protocol}\"`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`Invalid Dsn: Invalid port number \"${this.port}\"`);\n    }\n  }\n}\n","import { DsnLike } from '@sentry/types';\nimport { urlEncode } from '@sentry/utils/object';\nimport { Dsn } from './dsn';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this.dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this.dsnObject;\n  }\n\n  /** Returns a string with auth headers in the url to the store endpoint. */\n  public getStoreEndpoint(): string {\n    return `${this.getBaseUrl()}${this.getStoreEndpointPath()}`;\n  }\n\n  /** Returns the store endpoint with auth added in url encoded. */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    const dsn = this.dsnObject;\n    const auth = {\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    // Auth is intentionally sent as part of query string (NOT as custom HTTP header)\n    // to avoid preflight CORS requests\n    return `${this.getStoreEndpoint()}?${urlEncode(auth)}`;\n  }\n\n  /** Returns the base path of the url including the port. */\n  private getBaseUrl(): string {\n    const dsn = this.dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this.dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /** Returns an object that can be used in request headers. */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this.dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_timestamp=${new Date().getTime()}`);\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this.dsnObject;\n    const endpoint = `${this.getBaseUrl()}${dsn.path ? `/${dsn.path}` : ''}/api/embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n}\n","import { Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { Options } from './interfaces';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    for (const defaultIntegration of defaultIntegrations) {\n      if (\n        userIntegrationsNames.indexOf(getIntegrationName(defaultIntegration)) === -1 &&\n        pickedIntegrationsNames.indexOf(getIntegrationName(defaultIntegration)) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(getIntegrationName(defaultIntegration));\n      }\n    }\n\n    // Don't add same user integration twice\n    for (const userIntegration of userIntegrations) {\n      if (pickedIntegrationsNames.indexOf(getIntegrationName(userIntegration)) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(getIntegrationName(userIntegration));\n      }\n    }\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    return [...defaultIntegrations];\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration, options: Options): void {\n  if (installedIntegrations.indexOf(getIntegrationName(integration)) !== -1) {\n    return;\n  }\n\n  try {\n    integration.setupOnce();\n  } catch (_Oo) {\n    /** @deprecated */\n    // TODO: Remove in v5\n\n    // tslint:disable:deprecation\n    if (integration.install) {\n      logger.warn(`Integration ${getIntegrationName(integration)}: The install method is deprecated. Use \"setupOnce\".`);\n      integration.install(options);\n    }\n    // tslint:enable:deprecation\n  }\n\n  installedIntegrations.push(getIntegrationName(integration));\n  logger.log(`Integration installed: ${getIntegrationName(integration)}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[getIntegrationName(integration)] = integration;\n    setupIntegration(integration, options);\n  });\n  return integrations;\n}\n\n/**\n * Returns the integration static id.\n * @param integration Integration to retrieve id\n */\nfunction getIntegrationName(integration: Integration): string {\n  /**\n   * @depracted\n   */\n  // tslint:disable-next-line:no-unsafe-any\n  return (integration as any).constructor.id || integration.name;\n}\n","import { SentryError } from './error';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  public constructor(protected limit?: number) {}\n\n  /** Internal set of queued Promises */\n  private readonly buffer: Array<Promise<T>> = [];\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this.limit === undefined || this.length() < this.limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns The original promise.\n   */\n  public async add(task: Promise<T>): Promise<T> {\n    if (!this.isReady()) {\n      return Promise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this.buffer.indexOf(task) === -1) {\n      this.buffer.push(task);\n    }\n    task\n      .then(async () => this.remove(task))\n      .catch(async () =>\n        this.remove(task).catch(() => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns Removed promise.\n   */\n  public async remove(task: Promise<T>): Promise<T> {\n    const removedTask = this.buffer.splice(this.buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this.buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public async drain(timeout?: number): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      Promise.all(this.buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .catch(() => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  Integration,\n  IntegrationClass,\n  SentryBreadcrumbHint,\n  SentryEvent,\n  SentryEventHint,\n  SentryResponse,\n  Severity,\n  Transport,\n  TransportClass,\n  TransportOptions,\n} from '@sentry/types';\nimport { Dsn } from './dsn';\n\n/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n\n/** Base configuration options for every SDK. */\nexport interface Options {\n  /**\n   * Enable debug functionality in the SDK itself\n   */\n  debug?: boolean;\n\n  /**\n   * Specifies whether this SDK should activate and send events to Sentry.\n   * Disabling the SDK reduces all overhead from instrumentation, collecting\n   * breadcrumbs and capturing events. Defaults to true.\n   */\n  enabled?: boolean;\n\n  /**\n   * The Dsn used to connect to Sentry and identify the project. If omitted, the\n   * SDK will not send any data to Sentry.\n   */\n  dsn?: string;\n\n  /**\n   * If this is set to false, default integrations will not be added, otherwise this will internally be set to the\n   * recommended default integrations.\n   */\n  defaultIntegrations?: false | Integration[];\n\n  /**\n   * List of integrations that should be installed after SDK was initialized.\n   * Accepts either a list of integrations or a function that receives\n   * default integrations and returns a new, updated list.\n   */\n  integrations?: Integration[] | ((integrations: Integration[]) => Integration[]);\n\n  /**\n   * A pattern for error messages which should not be sent to Sentry.\n   * By default, all errors will be sent.\n   */\n  ignoreErrors?: Array<string | RegExp>;\n\n  /**\n   * Transport object that should be used to send events to Sentry\n   */\n  transport?: TransportClass<Transport>;\n\n  /**\n   * Options for the default transport that the SDK uses.\n   */\n  transportOptions?: TransportOptions;\n\n  /**\n   * The release identifier used when uploading respective source maps. Specify\n   * this value to allow Sentry to resolve the correct source maps when\n   * processing events.\n   */\n  release?: string;\n\n  /** The current environment of your application (e.g. \"production\"). */\n  environment?: string;\n\n  /** Sets the distribution for all events */\n  dist?: string;\n\n  /** The maximum number of breadcrumbs sent with events. Defaults to 100. */\n  maxBreadcrumbs?: number;\n\n  /** Console logging verbosity for the SDK Client. */\n  logLevel?: LogLevel;\n\n  /** A global sample rate to apply to all events (0 - 1). */\n  sampleRate?: number;\n\n  /** Attaches stacktraces to pure capture message / log integrations */\n  attachStacktrace?: boolean;\n\n  /**\n   * A callback invoked during event submission, allowing to optionally modify\n   * the event before it is sent to Sentry.\n   *\n   * Note that you must return a valid event from this callback. If you do not\n   * wish to modify the event, simply return it at the end.\n   * Returning null will case the event to be dropped.\n   *\n   * @param event The error or message event generated by the SDK.\n   * @param hint May contain additional information about the original exception.\n   * @returns A new event that will be sent | null.\n   */\n  beforeSend?(event: SentryEvent, hint?: SentryEventHint): SentryEvent | null | Promise<SentryEvent | null>;\n\n  /**\n   * A callback invoked when adding a breadcrumb, allowing to optionally modify\n   * it before adding it to future events.\n   *\n   * Note that you must return a valid breadcrumb from this callback. If you do\n   * not wish to modify the breadcrumb, simply return it at the end.\n   * Returning null will case the breadcrumb to be dropped.\n   *\n   * @param breadcrumb The breadcrumb as created by the SDK.\n   * @returns The breadcrumb that will be added | null.\n   */\n  beforeBreadcrumb?(breadcrumb: Breadcrumb, hint?: SentryBreadcrumbHint): Breadcrumb | null;\n}\n\n/**\n * User-Facing Sentry SDK Client Client.\n *\n * This interface contains all methods to interface with the SDK once it has\n * been installed. It allows to send events to Sentry, record breadcrumbs and\n * set a context included in every event. Since the SDK mutates its environment,\n * there will only be one instance during runtime. To retrieve that instance,\n * use {@link Client.getInstance}.\n *\n * Note that the call to {@link Client.install} should occur as early as\n * possible so that even errors during startup can be recorded reliably:\n *\n * @example\n * import { captureMessage } from '@sentry/node';\n * captureMessage('Custom message');\n */\nexport interface Client<O extends Options = Options> {\n  /**\n   * Installs the SDK if it hasn't been installed already.\n   *\n   * Since this performs modifications in the environment, such as instrumenting\n   * library functionality or adding signal handlers, this method will only\n   * execute once and cache its result.\n   *\n   * @returns If the installation was the successful or not.\n   */\n  install(): boolean;\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * @param exception An exception-like object.\n   * @param hint May contain additional information about the original exception.\n   * @param scope An optional scope containing event metadata.\n   * @returns SentryResponse status and event\n   */\n  captureException(exception: any, hint?: SentryEventHint, scope?: Scope): Promise<SentryResponse>;\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * @param message The message to send to Sentry.\n   * @param level Define the level of the message.\n   * @param hint May contain additional information about the original exception.\n   * @param scope An optional scope containing event metadata.\n   * @returns SentryResponse status and event\n   */\n  captureMessage(message: string, level?: Severity, hint?: SentryEventHint, scope?: Scope): Promise<SentryResponse>;\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope An optional scope containing event metadata.\n   * @returns SentryResponse status and event\n   */\n  captureEvent(event: SentryEvent, hint?: SentryEventHint, scope?: Scope): Promise<SentryResponse>;\n\n  /**\n   * Records a new breadcrumb which will be attached to future events.\n   *\n   * Breadcrumbs will be added to subsequent events to provide more context on\n   * user's actions prior to an error or crash. To configure the maximum number\n   * of breadcrumbs, use {@link Options.maxBreadcrumbs}.\n   *\n   * @param breadcrumb The breadcrumb to record.\n   * @param hint May contain additional information about the original breadcrumb.\n   * @param scope An optional scope to store this breadcrumb in.\n   */\n  addBreadcrumb(breadcrumb: Breadcrumb, hint?: SentryBreadcrumbHint, scope?: Scope): void;\n\n  /** Returns the current Dsn. */\n  getDsn(): Dsn | undefined;\n\n  /** Returns the current options. */\n  getOptions(): O;\n\n  /**\n   * A promise that resolves whenever the request buffer is empty.\n   * If you provide a timeout and the buffer takes longer to drain the promise returns false.\n   *\n   * @param timeout Maximum time in ms the client should wait.\n   */\n  close(timeout?: number): Promise<boolean>;\n\n  /** Returns an array of installed integrations on the client. */\n  getIntegration<T extends Integration>(integartion: IntegrationClass<T>): T | null;\n}\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events or breadcrumbs, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instanciate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}\n * and context via {@link Client.getContext}. Note that the user might update\n * these any time and they should not be cached.\n */\nexport interface Backend {\n  /** Installs the SDK into the environment. */\n  install?(): boolean;\n\n  /** Creates a {@link SentryEvent} from an exception. */\n  eventFromException(exception: any, hint?: SentryEventHint): Promise<SentryEvent>;\n\n  /** Creates a {@link SentryEvent} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: SentryEventHint): Promise<SentryEvent>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: SentryEvent): Promise<SentryResponse>;\n\n  /**\n   * Receives a breadcrumb and stores it in a platform-dependent way.\n   *\n   * This function is invoked by the client before merging the breadcrumb into\n   * the scope. Return `false` to prevent this breadcrumb from being merged.\n   * This should be done for custom breadcrumb management in the backend.\n   *\n   * In most cases, this method does not have to perform any action and can\n   * simply return `true`. It can either be synchronous or asynchronous.\n   *\n   * @param breadcrumb The breadcrumb to store.\n   * @returns True if the breadcrumb should be merged by the client.\n   */\n  storeBreadcrumb(breadcrumb: Breadcrumb): boolean;\n\n  /**\n   * Receives the whole scope and stores it in a platform-dependent way.\n   *\n   * This function is invoked by the scope after the scope is configured.\n   * This should be done for custom context management in the backend.\n   *\n   * @param scope The scope to store.\n   */\n  storeScope(scope: Scope): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n","import { Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  Integration,\n  IntegrationClass,\n  SentryBreadcrumbHint,\n  SentryEvent,\n  SentryEventHint,\n  SentryResponse,\n  Severity,\n  Status,\n} from '@sentry/types';\nimport { forget } from '@sentry/utils/async';\nimport { isPrimitive } from '@sentry/utils/is';\nimport { logger } from '@sentry/utils/logger';\nimport { consoleSandbox, uuid4 } from '@sentry/utils/misc';\nimport { truncate } from '@sentry/utils/string';\nimport { BackendClass } from './basebackend';\nimport { Dsn } from './dsn';\nimport { IntegrationIndex, setupIntegrations } from './integration';\nimport { Backend, Client, Options } from './interfaces';\nimport { PromiseBuffer } from './promisebuffer';\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 30;\n\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * By default, truncates URL values to 250 chars\n */\nconst MAX_URL_LENGTH = 250;\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the enviornment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  private readonly backend: B;\n\n  /** Options passed to the SDK. */\n  private readonly options: O;\n\n  /**\n   * The client Dsn, if specified in options. Without this Dsn, the SDK will be\n   * disabled.\n   */\n  private readonly dsn?: Dsn;\n\n  /**\n   * Stores whether installation has been performed and was successful. Before\n   * installing, this is undefined. Then it contains the success state.\n   */\n  private installed?: boolean;\n\n  /** Array of used integrations. */\n  private readonly integrations: IntegrationIndex;\n\n  /** A simple buffer holding all requests. */\n  protected readonly buffer: PromiseBuffer<SentryResponse> = new PromiseBuffer();\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this.backend = new backendClass(options);\n    this.options = options;\n\n    if (options.dsn) {\n      this.dsn = new Dsn(options.dsn);\n    }\n    // We have to setup the integrations in the constructor since we do not want\n    // that anyone needs to call client.install();\n    this.integrations = setupIntegrations(this.options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public install(): boolean {\n    if (!this.isEnabled()) {\n      return (this.installed = false);\n    }\n\n    const backend = this.getBackend();\n    if (!this.installed && backend.install) {\n      backend.install();\n    }\n\n    return (this.installed = true);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async captureException(exception: any, hint?: SentryEventHint, scope?: Scope): Promise<SentryResponse> {\n    return this.buffer.add(\n      (async () => {\n        const event = await this.getBackend().eventFromException(exception, hint);\n        return this.captureEvent(event, hint, scope);\n      })(),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async captureMessage(\n    message: string,\n    level?: Severity,\n    hint?: SentryEventHint,\n    scope?: Scope,\n  ): Promise<SentryResponse> {\n    return this.buffer.add(\n      (async () => {\n        const event = isPrimitive(message)\n          ? await this.getBackend().eventFromMessage(`${message}`, level, hint)\n          : await this.getBackend().eventFromException(message, hint);\n\n        return this.captureEvent(event, hint, scope);\n      })(),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async captureEvent(event: SentryEvent, hint?: SentryEventHint, scope?: Scope): Promise<SentryResponse> {\n    // Adding this here is technically not correct since if you call captureMessage/captureException it's already\n    // buffered. But since we not really need the count and we only need to know if the buffer is full or not,\n    // This is fine...\n    return this.buffer.add(\n      (async () =>\n        this.processEvent(event, async finalEvent => this.getBackend().sendEvent(finalEvent), hint, scope))(),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: SentryBreadcrumbHint, scope?: Scope): void {\n    const { beforeBreadcrumb, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = this.getOptions();\n\n    if (maxBreadcrumbs <= 0) {\n      return;\n    }\n\n    const timestamp = new Date().getTime() / 1000;\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) {\n      return;\n    }\n\n    if (this.getBackend().storeBreadcrumb(finalBreadcrumb) && scope) {\n      scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this.dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this.options;\n  }\n\n  /** Returns the current backend. */\n  protected getBackend(): B {\n    return this.backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this.dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected async prepareEvent(event: SentryEvent, scope?: Scope, hint?: SentryEventHint): Promise<SentryEvent | null> {\n    const { environment, maxBreadcrumbs = DEFAULT_BREADCRUMBS, release, dist } = this.getOptions();\n\n    const prepared = { ...event };\n    if (prepared.environment === undefined && environment !== undefined) {\n      prepared.environment = environment;\n    }\n    if (prepared.release === undefined && release !== undefined) {\n      prepared.release = release;\n    }\n\n    if (prepared.dist === undefined && dist !== undefined) {\n      prepared.dist = dist;\n    }\n\n    if (prepared.message) {\n      prepared.message = truncate(prepared.message, MAX_URL_LENGTH);\n    }\n\n    const exception = prepared.exception && prepared.exception.values && prepared.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, MAX_URL_LENGTH);\n    }\n\n    const request = prepared.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, MAX_URL_LENGTH);\n    }\n\n    if (prepared.event_id === undefined) {\n      prepared.event_id = uuid4();\n    }\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (scope) {\n      return scope.applyToEvent(prepared, hint, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n    }\n\n    return prepared;\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   * The returned event status offers clues to whether the event was sent to\n   * Sentry and accepted there. If the {@link Options.shouldSend} hook returns\n   * `false`, the status will be {@link SendStatus.Skipped}. If the rate limit\n   * was exceeded, the status will be {@link SendStatus.RateLimit}.\n   *\n   * @param event The event to send to Sentry.\n   * @param send A function to actually send the event.\n   * @param scope A scope containing event metadata.\n   * @param hint May contain additional informartion about the original exception.\n   * @returns A Promise that resolves with the event status.\n   */\n  protected async processEvent(\n    event: SentryEvent,\n    send: (finalEvent: SentryEvent) => Promise<SentryResponse>,\n    hint?: SentryEventHint,\n    scope?: Scope,\n  ): Promise<SentryResponse> {\n    if (!this.isEnabled()) {\n      return {\n        status: Status.Skipped,\n      };\n    }\n\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    if (typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return {\n        status: Status.Skipped,\n      };\n    }\n\n    const prepared = await this.prepareEvent(event, scope, hint);\n    if (prepared === null) {\n      return {\n        status: Status.Skipped,\n      };\n    }\n\n    let finalEvent: SentryEvent | null = prepared;\n\n    try {\n      const isInternalException = hint && hint.data && (hint.data as { [key: string]: any }).__sentry__ === true;\n      if (!isInternalException && beforeSend) {\n        finalEvent = await beforeSend(prepared, hint);\n        if ((typeof finalEvent as any) === 'undefined') {\n          logger.error('`beforeSend` method has to return `null` or a valid event');\n        }\n      }\n    } catch (exception) {\n      forget(\n        this.captureException(exception, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: exception as Error,\n        }),\n      );\n\n      return {\n        reason: 'Event processing in beforeSend method threw an exception',\n        status: Status.Invalid,\n      };\n    }\n\n    if (finalEvent === null) {\n      return {\n        reason: 'Event dropped due to being discarded by beforeSend method',\n        status: Status.Skipped,\n      };\n    }\n\n    try {\n      const response = await send(finalEvent);\n      response.event = finalEvent;\n\n      if (response.status === Status.RateLimit) {\n        // TODO: Handle rate limits and maintain a queue. For now, we require SDK\n        // implementors to override this method and handle it themselves.\n      }\n      return response;\n    } catch (error) {\n      // We have a catch here since the transport can reject the request internally.\n      // If we do not catch this here, we will run into an endless loop.\n      logger.error(`${error}`);\n      return {\n        reason: `${error}`,\n        status: Status.Failed,\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async close(timeout?: number): Promise<boolean> {\n    return (await Promise.all([\n      this.getBackend()\n        .getTransport()\n        .close(timeout),\n      this.buffer.drain(timeout),\n    ])).reduce((prev, current) => prev && current);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegrations(): IntegrationIndex {\n    return this.integrations || {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this.integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n}\n","/**\n * Consumes the promise and logs the error when it rejects.\n * @param promise A promise to forget.\n */\nexport function forget(promise: Promise<any>): void {\n  promise.catch(e => {\n    // TODO: Use a better logging mechanism\n    console.error(e);\n  });\n}\n\n/**\n * Helper to filter an array with asynchronous callbacks.\n *\n * @param array An array containing items to filter.\n * @param predicate An async predicate evaluated on every item.\n * @param thisArg Optional value passed as \"this\" into the callback.\n * @returns An array containing only values where the callback returned true.\n */\nexport async function filterAsync<T>(\n  array: T[],\n  predicate: (item: T) => Promise<boolean> | boolean,\n  thisArg?: any,\n): Promise<T[]> {\n  const verdicts = await Promise.all(array.map(predicate, thisArg));\n  return array.filter((_, index) => verdicts[index]);\n}\n","import { SentryResponse, Status, Transport } from '@sentry/types';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(_: string): Promise<SentryResponse> {\n    return Promise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async close(_?: number): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n}\n","import { Scope } from '@sentry/hub';\nimport { Breadcrumb, SentryEvent, SentryEventHint, SentryResponse, Severity, Transport } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { serialize } from '@sentry/utils/object';\nimport { SentryError } from './error';\nimport { Backend, Options } from './interfaces';\nimport { NoopTransport } from './transports/noop';\n\n/** A class object that can instanciate Backend objects. */\nexport interface BackendClass<B extends Backend, O extends Options> {\n  new (options: O): B;\n}\n\n/**\n * This is the base implemention of a Backend.\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly options: O;\n\n  /** Cached transport used internally. */\n  protected transport: Transport;\n\n  /** Creates a new browser backend instance. */\n  public constructor(options: O) {\n    this.options = options;\n    if (!this.options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this.transport = this.setupTransport();\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected setupTransport(): Transport {\n    return new NoopTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(_exception: any, _hint?: SentryEventHint): Promise<SentryEvent> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(_message: string, _level?: Severity, _hint?: SentryEventHint): Promise<SentryEvent> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(event: SentryEvent): Promise<SentryResponse> {\n    // TODO: Remove with v5\n    // tslint:disable-next-line\n    if (this.transport.captureEvent) {\n      // tslint:disable-next-line\n      return this.transport.captureEvent(event);\n    }\n    // --------------------\n    return this.transport.sendEvent(serialize(event));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeBreadcrumb(_: Breadcrumb): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeScope(_: Scope): void {\n    // Noop\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this.transport;\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent, SentryException, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { getEventDescription } from '@sentry/utils/misc';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  private previousEvent?: SentryEvent;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (currentEvent: SentryEvent) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (self.shouldDropEvent(currentEvent, self.previousEvent)) {\n            return null;\n          }\n        } catch (_oO) {\n          return (self.previousEvent = currentEvent);\n        }\n\n        return (self.previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n\n  /** JSDoc */\n  public shouldDropEvent(currentEvent: SentryEvent, previousEvent?: SentryEvent): boolean {\n    if (!previousEvent) {\n      return false;\n    }\n\n    if (this.isSameMessageEvent(currentEvent, previousEvent)) {\n      logger.warn(\n        `Event dropped due to being a duplicate of previous event (same message).\\nEvent: ${getEventDescription(\n          currentEvent,\n        )}`,\n      );\n      return true;\n    }\n\n    if (this.isSameExceptionEvent(currentEvent, previousEvent)) {\n      logger.warn(\n        `Event dropped due to being a duplicate of previous event (same exception).\\nEvent: ${getEventDescription(\n          currentEvent,\n        )}`,\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /** JSDoc */\n  private isSameMessageEvent(currentEvent: SentryEvent, previousEvent: SentryEvent): boolean {\n    const currentMessage = currentEvent.message;\n    const previousMessage = previousEvent.message;\n\n    // If no event has a message, they were both exceptions, so bail out\n    if (!currentMessage && !previousMessage) {\n      return false;\n    }\n\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n      return false;\n    }\n\n    if (currentMessage !== previousMessage) {\n      return false;\n    }\n\n    if (!this.isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this.isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private getFramesFromEvent(event: SentryEvent): StackFrame[] | undefined {\n    const exception = event.exception;\n\n    if (exception) {\n      try {\n        // @ts-ignore\n        return exception.values[0].stacktrace.frames;\n      } catch (_oO) {\n        return undefined;\n      }\n    } else if (event.stacktrace) {\n      return event.stacktrace.frames;\n    } else {\n      return undefined;\n    }\n  }\n\n  /** JSDoc */\n  private isSameStacktrace(currentEvent: SentryEvent, previousEvent: SentryEvent): boolean {\n    let currentFrames = this.getFramesFromEvent(currentEvent);\n    let previousFrames = this.getFramesFromEvent(previousEvent);\n\n    // If no event has a fingerprint, they are assumed to be the same\n    if (!currentFrames && !previousFrames) {\n      return true;\n    }\n\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n      return false;\n    }\n\n    currentFrames = currentFrames as StackFrame[];\n    previousFrames = previousFrames as StackFrame[];\n\n    // If number of frames differ, they are not the same\n    if (previousFrames.length !== currentFrames.length) {\n      return false;\n    }\n\n    // Otherwise, compare the two\n    for (let i = 0; i < previousFrames.length; i++) {\n      const frameA = previousFrames[i];\n      const frameB = currentFrames[i];\n\n      if (\n        frameA.filename !== frameB.filename ||\n        frameA.lineno !== frameB.lineno ||\n        frameA.colno !== frameB.colno ||\n        frameA.function !== frameB.function\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private getExceptionFromEvent(event: SentryEvent): SentryException | undefined {\n    return event.exception && event.exception.values && event.exception.values[0];\n  }\n\n  /** JSDoc */\n  private isSameExceptionEvent(currentEvent: SentryEvent, previousEvent: SentryEvent): boolean {\n    const previousException = this.getExceptionFromEvent(previousEvent);\n    const currentException = this.getExceptionFromEvent(currentEvent);\n\n    if (!previousException || !currentException) {\n      return false;\n    }\n\n    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n      return false;\n    }\n\n    if (!this.isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this.isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private isSameFingerprint(currentEvent: SentryEvent, previousEvent: SentryEvent): boolean {\n    let currentFingerprint = currentEvent.fingerprint;\n    let previousFingerprint = previousEvent.fingerprint;\n\n    // If no event has a fingerprint, they are assumed to be the same\n    if (!currentFingerprint && !previousFingerprint) {\n      return true;\n    }\n\n    // If only one event has a fingerprint, but not the other one, they are not the same\n    if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n      return false;\n    }\n\n    currentFingerprint = currentFingerprint as string[];\n    previousFingerprint = previousFingerprint as string[];\n\n    // Otherwise, compare the two\n    try {\n      return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n    } catch (_oO) {\n      return false;\n    }\n  }\n}\n","import { Integration, SentryWrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    originalFunctionToString = Function.prototype.toString;\n\n    Function.prototype.toString = function(this: SentryWrappedFunction, ...args: any[]): string {\n      const context = this.__sentry__ ? this.__sentry_original__ : this;\n      // tslint:disable-next-line:no-unsafe-any\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\n\n/**\n * @deprecated\n * This file can be safely removed in the next major bump\n */\n\n/** Adds SDK info to an event. */\nexport class SDKInformation implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = 'SDKInformation';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    logger.warn(\n      \"SDKInformation Integration is deprecated and can be safely removed. It's functionality has been merged into the SDK's core.\",\n    );\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent } from '@sentry/types';\nimport { isRegExp } from '@sentry/utils/is';\nimport { logger } from '@sentry/utils/logger';\nimport { getEventDescription } from '@sentry/utils/misc';\nimport { includes } from '@sentry/utils/string';\nimport { Client } from '../interfaces';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  blacklistUrls?: Array<string | RegExp>;\n  ignoreErrors?: Array<string | RegExp>;\n  ignoreInternal?: boolean;\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  public constructor(private readonly options: InboundFiltersOptions = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient() as Client;\n        const clientOptions = client ? client.getOptions() : {};\n        const options = self.mergeOptions(clientOptions);\n        if (self.shouldDropEvent(event, options)) {\n          return null;\n        }\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  public shouldDropEvent(event: SentryEvent, options: InboundFiltersOptions): boolean {\n    if (this.isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this.isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this.isBlacklistedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`blacklistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this.getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this.isWhitelistedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`whitelistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this.getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  public isSentryError(event: SentryEvent, options: InboundFiltersOptions = {}): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      // tslint:disable-next-line:no-unsafe-any\n      return (event as any).exception.values[0].type === 'SentryError';\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  public isIgnoredError(event: SentryEvent, options: InboundFiltersOptions = {}): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this.getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => this.isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  public isBlacklistedUrl(event: SentryEvent, options: InboundFiltersOptions = {}): boolean {\n    // TODO: Use Glob instead?\n    if (!options.blacklistUrls || !options.blacklistUrls.length) {\n      return false;\n    }\n    const url = this.getEventFilterUrl(event);\n    return !url ? false : options.blacklistUrls.some(pattern => this.isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  public isWhitelistedUrl(event: SentryEvent, options: InboundFiltersOptions = {}): boolean {\n    // TODO: Use Glob instead?\n    if (!options.whitelistUrls || !options.whitelistUrls.length) {\n      return true;\n    }\n    const url = this.getEventFilterUrl(event);\n    return !url ? true : options.whitelistUrls.some(pattern => this.isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  public mergeOptions(clientOptions: InboundFiltersOptions = {}): InboundFiltersOptions {\n    return {\n      blacklistUrls: [...(this.options.blacklistUrls || []), ...(clientOptions.blacklistUrls || [])],\n      ignoreErrors: [\n        ...(this.options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this.options.ignoreInternal !== 'undefined' ? this.options.ignoreInternal : true,\n      whitelistUrls: [...(this.options.whitelistUrls || []), ...(clientOptions.whitelistUrls || [])],\n    };\n  }\n\n  /** JSDoc */\n  private isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n    if (isRegExp(pattern)) {\n      return (pattern as RegExp).test(value);\n    } else if (typeof pattern === 'string') {\n      return includes(value, pattern);\n    } else {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private getPossibleEventMessages(event: SentryEvent): string[] {\n    if (event.message) {\n      return [event.message];\n    } else if (event.exception) {\n      try {\n        // tslint:disable-next-line:no-unsafe-any\n        const { type, value } = (event as any).exception.values[0];\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    } else {\n      return [];\n    }\n  }\n\n  /** JSDoc */\n  private getEventFilterUrl(event: SentryEvent): string | null {\n    try {\n      if (event.stacktrace) {\n        // tslint:disable-next-line:no-unsafe-any\n        return (event as any).stacktrace.frames[0].filename;\n      } else if (event.exception) {\n        // tslint:disable-next-line:no-unsafe-any\n        return (event as any).exception.values[0].stacktrace.frames[0].filename;\n      } else {\n        return null;\n      }\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent, SentryEventHint } from '@sentry/types';\nimport { isError, isString } from '@sentry/utils/is';\nimport { logger } from '@sentry/utils/logger';\nimport { safeNormalize } from '@sentry/utils/object';\n\n/**\n * Just an Error object with arbitrary attributes attached to it.\n */\ninterface ExtendedError extends Error {\n  [key: string]: unknown;\n}\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class ExtraErrorData implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = ExtraErrorData.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExtraErrorData';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent, hint?: SentryEventHint) => {\n      const self = getCurrentHub().getIntegration(ExtraErrorData);\n      if (!self) {\n        return event;\n      }\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  }\n\n  /**\n   * Attaches extracted information from the Error object to extra field in the SentryEvent\n   */\n  public enhanceEventWithErrorData(event: SentryEvent, hint?: SentryEventHint): SentryEvent {\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n\n    const errorData = this.extractErrorData(hint.originalException);\n\n    if (errorData) {\n      let extra = {\n        ...event.extra,\n      };\n      const normalizedErrorData = safeNormalize(errorData);\n      if (!isString(normalizedErrorData)) {\n        extra = {\n          ...event.extra,\n          ...normalizedErrorData,\n        };\n      }\n      return {\n        ...event,\n        extra,\n      };\n    }\n\n    return event;\n  }\n\n  /**\n   * Extract extra information from the Error object\n   */\n  private extractErrorData(error: ExtendedError): { [key: string]: unknown } | null {\n    let result = null;\n    // We are trying to enhance already existing event, so no harm done if it won't succeed\n    try {\n      const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      const name = error.name || error.constructor.name;\n      const errorKeys = Object.getOwnPropertyNames(error).filter(key => nativeKeys.indexOf(key) === -1);\n\n      if (errorKeys.length) {\n        const extraErrorInfo: { [key: string]: unknown } = {};\n        for (const key of errorKeys) {\n          let value = error[key];\n          if (isError(value)) {\n            value = (value as Error).name || (value as Error).constructor.name;\n          }\n          extraErrorInfo[key] = value;\n        }\n        result = {\n          [name]: extraErrorInfo,\n        };\n      }\n    } catch (oO) {\n      logger.error('Unable to extract extra data from the Error object:', oO);\n    }\n\n    return result;\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent, SentryEventHint } from '@sentry/types';\n\n/** JSDoc */\ninterface DebugOptions {\n  stringify?: boolean;\n  debugger?: boolean;\n}\n\n/** JSDoc */\nexport class Debug implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Debug.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Debug';\n\n  /** JSDoc */\n  private readonly options: DebugOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: DebugOptions) {\n    this.options = {\n      debugger: false,\n      stringify: false,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent, hint?: SentryEventHint) => {\n      const self = getCurrentHub().getIntegration(Debug);\n      if (self) {\n        // tslint:disable:no-console\n        // tslint:disable:no-debugger\n        if (self.options.debugger) {\n          debugger;\n        }\n\n        if (self.options.stringify) {\n          console.log(JSON.stringify(event, null, 2));\n          if (hint) {\n            console.log(JSON.stringify(hint, null, 2));\n          }\n        } else {\n          console.log(event);\n          if (hint) {\n            console.log(hint);\n          }\n        }\n      }\n      return event;\n    });\n  }\n}\n","// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  const parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(p => !!p), !resolvedAbsolute).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  // tslint:disable:no-parameter-reassignment\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalize(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(path.split('/').filter(p => !!p), !isPathAbsolute).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalize(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent, StackFrame } from '@sentry/types';\nimport { basename, relative } from '@sentry/utils/path';\n\ntype StackFrameIteratee = (frame: StackFrame) => Promise<StackFrame>;\n\n/** Rewrite event frames paths */\nexport class RewriteFrames implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = RewriteFrames.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'RewriteFrames';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly root?: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly iteratee: StackFrameIteratee = async (frame: StackFrame) => {\n    if (frame.filename && frame.filename.startsWith('/')) {\n      const base = this.root ? relative(this.root, frame.filename) : basename(frame.filename);\n      frame.filename = `app:///${base}`;\n    }\n    return frame;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { root?: string; iteratee?: StackFrameIteratee } = {}) {\n    if (options.root) {\n      this.root = options.root;\n    }\n    if (options.iteratee) {\n      this.iteratee = options.iteratee;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async event => {\n      const self = getCurrentHub().getIntegration(RewriteFrames);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  public async process(event: SentryEvent): Promise<SentryEvent> {\n    const frames = this.getFramesFromEvent(event);\n    if (frames) {\n      for (const i in frames) {\n        // tslint:disable-next-line\n        frames[i] = await this.iteratee(frames[i]);\n      }\n    }\n    return event;\n  }\n\n  /** JSDoc */\n  private getFramesFromEvent(event: SentryEvent): StackFrame[] | undefined {\n    const exception = event.exception;\n\n    if (exception) {\n      try {\n        // tslint:disable-next-line:no-unsafe-any\n        return (exception as any).values[0].stacktrace.frames;\n      } catch (_oO) {\n        return undefined;\n      }\n    } else if (event.stacktrace) {\n      return event.stacktrace.frames;\n    } else {\n      return undefined;\n    }\n  }\n}\n","import { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    // tslint:disable:no-unused-expression\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // It really needs 1 argument, not 0.\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore\n    // tslint:disable:no-unused-expression\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    // tslint:disable:no-unused-expression\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject())) {\n    return false;\n  }\n\n  try {\n    // tslint:disable-next-line:no-unused-expression\n    new Headers();\n    // tslint:disable-next-line:no-unused-expression\n    new Request('');\n    // tslint:disable-next-line:no-unused-expression\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n  const global = getGlobalObject();\n  const fetch = (global as any).fetch;\n  // tslint:disable-next-line:no-unsafe-any\n  return fetch.toString().indexOf('native') !== -1;\n}\n\n/**\n * Tells whether current environment supports sendBeacon API\n * {@link supportsBeacon}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsBeacon(): boolean {\n  const global = getGlobalObject();\n  return 'navigator' in global && 'sendBeacon' in global.navigator;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    // tslint:disable:no-unused-expression\n    new Request('pickleRick', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject();\n  const chrome = (global as any).chrome;\n  // tslint:disable-next-line:no-unsafe-any\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","// tslint:disable\n\n/*\n * JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/**\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safeAdd(x: number, y: number) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xffff);\n}\n\n/**\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bitRotateLeft(num: number, cnt: number) {\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/**\n * These functions implement the four basic operations the algorithm uses.\n */\nfunction md5cmn(q: number, a: number, b: number, x: number, s: number, t: number) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\nfunction md5ff(a: number, b: number, c: number, d: number, x: number, s: number, t: number) {\n  return md5cmn((b & c) | (~b & d), a, b, x, s, t);\n}\nfunction md5gg(a: number, b: number, c: number, d: number, x: number, s: number, t: number) {\n  return md5cmn((b & d) | (c & ~d), a, b, x, s, t);\n}\nfunction md5hh(a: number, b: number, c: number, d: number, x: number, s: number, t: number) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5ii(a: number, b: number, c: number, d: number, x: number, s: number, t: number) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\n/**\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\nfunction binlMD5(x: any[], len: number) {\n  /** append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n  let i;\n  let olda;\n  let oldb;\n  let oldc;\n  let oldd;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (i = 0; i < x.length; i += 16) {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n  return [a, b, c, d];\n}\n\n/**\n * Convert an array of little-endian words to a string\n */\nfunction binl2rstr(input: any[]) {\n  let i;\n  let output = '';\n  const length32 = input.length * 32;\n  for (i = 0; i < length32; i += 8) {\n    output += String.fromCharCode((input[i >> 5] >>> i % 32) & 0xff);\n  }\n  return output;\n}\n\n/**\n * Convert a raw string to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binl(input: string) {\n  let i;\n  const output: any[] = [];\n  output[(input.length >> 2) - 1] = undefined;\n  for (i = 0; i < output.length; i += 1) {\n    output[i] = 0;\n  }\n  const length8 = input.length * 8;\n  for (i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32;\n  }\n  return output;\n}\n\n/**\n * Calculate the MD5 of a raw string\n */\nfunction rstrMD5(s: string) {\n  return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));\n}\n\n/**\n * Calculate the HMAC-MD5, of a key and some data (raw strings)\n */\nfunction rstrHMACMD5(key: string, data: string) {\n  let i;\n  let bkey = rstr2binl(key);\n  const ipad = [];\n  const opad = [];\n  let hash;\n  ipad[15] = opad[15] = undefined;\n  if (bkey.length > 16) {\n    bkey = binlMD5(bkey, key.length * 8);\n  }\n  for (i = 0; i < 16; i += 1) {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5c5c5c5c;\n  }\n  hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);\n  return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));\n}\n\n/**\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input: string) {\n  const hexTab = '0123456789abcdef';\n  let output = '';\n  let x;\n  let i;\n  for (i = 0; i < input.length; i += 1) {\n    x = input.charCodeAt(i);\n    output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);\n  }\n  return output;\n}\n\n/**\n * Encode a string as utf-8\n */\nfunction str2rstrUTF8(input: string) {\n  return unescape(encodeURIComponent(input));\n}\n\n/*\n * Take string arguments and return either raw or hex encoded strings\n */\nfunction rawMD5(s: string) {\n  return rstrMD5(str2rstrUTF8(s));\n}\nfunction hexMD5(s: string) {\n  return rstr2hex(rawMD5(s));\n}\nfunction rawHMACMD5(k: string, d: string) {\n  return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));\n}\nfunction hexHMACMD5(k: string, d: string) {\n  return rstr2hex(rawHMACMD5(k, d));\n}\n\nfunction md5(string: string, key?: string, raw?: boolean) {\n  if (!key) {\n    if (!raw) {\n      return hexMD5(string);\n    }\n    return rawMD5(string);\n  }\n  if (!raw) {\n    return hexHMACMD5(key, string);\n  }\n  return rawHMACMD5(key, string);\n}\n\nexport { md5 };\n","// tslint:disable\n\nimport { isUndefined, isError, isErrorEvent } from '@sentry/utils/is';\nimport { getGlobalObject } from '@sentry/utils/misc';\n\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number;\n  column: number;\n  context: string[];\n}\n\nexport interface StackTrace {\n  /**\n   * Known modes: callers, failed, multiline, onerror, stack, stacktrace\n   */\n  mode: string;\n  mechanism: string;\n  name: string;\n  message: string;\n  url: string;\n  stack: StackFrame[];\n  useragent: string;\n  original?: string;\n}\n\ninterface ComputeStackTrace {\n  /**\n   * Computes a stack trace for an exception.\n   * @param {Error} ex\n   * @param {(string|number)=} depth\n   */\n  (ex: Error, depth?: string | number): StackTrace;\n\n  /**\n   * Adds information about the first frame to incomplete stack traces.\n   * Safari and IE require this to get complete data on the first frame.\n   * @param {Object.<string, *>} stackInfo Stack trace information from\n   * one of the compute* methods.\n   * @param {string} url The URL of the script that caused an error.\n   * @param {(number|string)} lineNo The line number of the script that\n   * caused an error.\n   * @param {string=} message The error generated by the browser, which\n   * hopefully contains the name of the object that caused the error.\n   * @return {boolean} Whether or not the stack information was\n   * augmented.\n   */\n  augmentStackTraceWithInitialElement: (\n    stackInfo: string,\n    url: string,\n    lineNo: string | number,\n    message?: string,\n  ) => boolean;\n\n  /**\n   * Tries to use an externally loaded copy of source code to determine\n   * the name of a function by looking at the name of the variable it was\n   * assigned to, if any.\n   * @param {string} url URL of source code.\n   * @param {(string|number)} lineNo Line number in source code.\n   * @return {string} The function name, if discoverable.\n   */\n  guessFunctionName: (url: string, lineNo: string | number) => string;\n\n  /**\n   * Retrieves the surrounding lines from where an exception occurred.\n   * @param {string} url URL of source code.\n   * @param {(string|number)} line Line number in source code to centre\n   * around for context.\n   * @return {?Array.<string>} Lines of source code.\n   */\n  gatherContext: (url: string, line: string | number) => string[];\n\n  /**\n   * Logs a stacktrace starting from the previous call and working down.\n   * @param {(number|string)=} depth How many frames deep to trace.\n   * @return {Object.<string, *>} Stack trace information.\n   */\n  ofCaller: (depth?: string | number) => StackTrace;\n\n  /**\n   * Retrieves source code from the source code cache.\n   * @param {string} url URL of source code.\n   * @return {Array.<string>} Source contents.\n   */\n  getSource: (url: string) => string[];\n}\n\ninterface ReportSubscriber {\n  (stackTrace: StackTrace, isWindowError: boolean, error: any): void;\n}\n\ninterface Report {\n  /**\n   * Reports an unhandled Error to TraceKit.\n   * @param {Error} ex\n   */\n  (ex: Error): void;\n\n  /**\n   * Add a crash handler.\n   * @param {Function} handler\n   */\n  subscribe(handler: ReportSubscriber): void;\n\n  /**\n   * Remove a crash handler.\n   * @param {Function} handler\n   */\n  unsubscribe(handler: ReportSubscriber): void;\n}\n\n/**\n * TraceKit - Cross brower stack traces\n *\n * This was originally forked from github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n *\n * NOTE: Last merge with upstream repository\n * Jul 11,2018 - #f03357c\n *\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n\nvar window = getGlobalObject() as Window;\n\ninterface TraceKit {\n  wrap(func: () => void): () => void;\n  report: any;\n  collectWindowErrors: any;\n  computeStackTrace: any;\n  remoteFetching: any;\n  linesOfContext: any;\n  extendToAsynchronousCallbacks: any;\n}\n\nvar TraceKit: TraceKit = {\n  wrap: () => () => {},\n  report: false,\n  collectWindowErrors: false,\n  computeStackTrace: false,\n  remoteFetching: false,\n  linesOfContext: false,\n  extendToAsynchronousCallbacks: false,\n};\n\n// var TraceKit: TraceKitInterface = {};\n// var TraceKit = {};\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object: any, key: any) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * A safe form of location.href<br/>\n *\n * @return {string} location.href\n */\nfunction getLocationHref() {\n  if (typeof document === 'undefined' || document.location == null) return '';\n  return document.location.href;\n}\n\n/**\n * A safe form of location.origin<br/>\n *\n * @return {string} location.origin\n */\nfunction getLocationOrigin() {\n  if (typeof document === 'undefined' || document.location == null) return '';\n\n  // Oh dear IE10...\n  if (!document.location.origin) {\n    return (\n      document.location.protocol +\n      '//' +\n      document.location.hostname +\n      (document.location.port ? ':' + document.location.port : '')\n    );\n  }\n\n  return document.location.origin;\n}\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func: any) {\n  function wrapped() {\n    try {\n      // @ts-ignore\n      return func.apply(this, arguments);\n    } catch (e) {\n      TraceKit.report(e);\n      throw e;\n    }\n  }\n  return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n  var handlers: any = [],\n    lastException: any = null,\n    lastExceptionStack: any = null;\n\n  /**\n   * Add a crash handler.\n   * @param {Function} handler\n   * @memberof TraceKit.report\n   */\n  function subscribe(handler: any) {\n    // NOTE: We call both handlers manually in browser/integrations/globalhandler.ts\n    // So user can choose which one he wants to attach\n\n    // installGlobalHandler();\n    // installGlobalUnhandledRejectionHandler();\n    handlers.push(handler);\n  }\n\n  /**\n   * Remove a crash handler.\n   * @param {Function} handler\n   * @memberof TraceKit.report\n   */\n  function unsubscribe(handler: any) {\n    for (var i = handlers.length - 1; i >= 0; --i) {\n      if (handlers[i] === handler) {\n        handlers.splice(i, 1);\n      }\n    }\n\n    if (handlers.length === 0) {\n      uninstallGlobalHandler();\n      uninstallGlobalUnhandledRejectionHandler();\n    }\n  }\n\n  /**\n   * Dispatch stack information to all handlers.\n   * @param {TraceKit.StackTrace} stack\n   * @param {boolean} isWindowError Is this a top-level window error?\n   * @param {Error=} error The error that's being handled (if available, null otherwise)\n   * @memberof TraceKit.report\n   * @throws An exception if an error occurs while calling an handler.\n   */\n  function notifyHandlers(stack: any, isWindowError: any, error: any) {\n    var exception = null;\n    if (isWindowError && !TraceKit.collectWindowErrors) {\n      return;\n    }\n    for (var i in handlers) {\n      if (_has(handlers, i)) {\n        try {\n          handlers[i](stack, isWindowError, error);\n        } catch (inner) {\n          exception = inner;\n        }\n      }\n    }\n\n    if (exception) {\n      throw exception;\n    }\n  }\n\n  var _oldOnerrorHandler: any, _onErrorHandlerInstalled: any;\n  var _oldOnunhandledrejectionHandler: any, _onUnhandledRejectionHandlerInstalled: any;\n\n  /**\n   * Ensures all global unhandled exceptions are recorded.\n   * Supported by Gecko and IE.\n   * @param {string} message Error message.\n   * @param {string} url URL of script that generated the exception.\n   * @param {(number|string)} lineNo The line number at which the error occurred.\n   * @param {(number|string)=} columnNo The column number at which the error occurred.\n   * @param {Error=} errorObj The actual Error object.\n   * @memberof TraceKit.report\n   */\n  function traceKitWindowOnError(message: any, url: any, lineNo: any, columnNo: any, errorObj: any) {\n    var stack = null;\n    // If 'errorObj' is ErrorEvent, get real Error from inside\n    errorObj = isErrorEvent(errorObj) ? errorObj.error : errorObj;\n    // If 'message' is ErrorEvent, get real message from inside\n    message = isErrorEvent(message) ? message.message : message;\n\n    if (lastExceptionStack) {\n      TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n      processLastException();\n    } else if (errorObj && isError(errorObj)) {\n      stack = TraceKit.computeStackTrace(errorObj);\n      stack.mechanism = 'onerror';\n      notifyHandlers(stack, true, errorObj);\n    } else {\n      var location: any = {\n        url: url,\n        line: lineNo,\n        column: columnNo,\n      };\n\n      var name;\n      var msg = message; // must be new var or will modify original `arguments`\n      if ({}.toString.call(message) === '[object String]') {\n        var groups = message.match(ERROR_TYPES_RE);\n        if (groups) {\n          name = groups[1];\n          msg = groups[2];\n        }\n      }\n\n      location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n      location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n      stack = {\n        name: name,\n        message: msg,\n        mode: 'onerror',\n        mechanism: 'onerror',\n        stack: [\n          {\n            ...location,\n            // Firefox sometimes doesn't return url correctly and this is an old behavior\n            // that I prefer to port here as well.\n            // It can be altered only here, as previously it's using `location.url` for other things — Kamil\n            url: location.url || getLocationHref(),\n          },\n        ],\n      };\n\n      notifyHandlers(stack, true, null);\n    }\n\n    if (_oldOnerrorHandler) {\n      // @ts-ignore\n      return _oldOnerrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  }\n\n  /**\n   * Ensures all unhandled rejections are recorded.\n   * @param {PromiseRejectionEvent} e event.\n   * @memberof TraceKit.report\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n   */\n  function traceKitWindowOnUnhandledRejection(e: any) {\n    var err = (e && (e.detail ? e.detail.reason : e.reason)) || e;\n    var stack = TraceKit.computeStackTrace(err);\n    stack.mechanism = 'onunhandledrejection';\n    notifyHandlers(stack, true, err);\n  }\n\n  /**\n   * Install a global onerror handler\n   * @memberof TraceKit.report\n   */\n  function installGlobalHandler() {\n    if (_onErrorHandlerInstalled === true) {\n      return;\n    }\n\n    _oldOnerrorHandler = window.onerror;\n    window.onerror = traceKitWindowOnError;\n    _onErrorHandlerInstalled = true;\n  }\n\n  /**\n   * Uninstall the global onerror handler\n   * @memberof TraceKit.report\n   */\n  function uninstallGlobalHandler() {\n    if (_onErrorHandlerInstalled) {\n      window.onerror = _oldOnerrorHandler;\n      _onErrorHandlerInstalled = false;\n    }\n  }\n\n  /**\n   * Install a global onunhandledrejection handler\n   * @memberof TraceKit.report\n   */\n  function installGlobalUnhandledRejectionHandler() {\n    if (_onUnhandledRejectionHandlerInstalled === true) {\n      return;\n    }\n\n    _oldOnunhandledrejectionHandler = (window as any).onunhandledrejection;\n    (window as any).onunhandledrejection = traceKitWindowOnUnhandledRejection;\n    _onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * Uninstall the global onunhandledrejection handler\n   * @memberof TraceKit.report\n   */\n  function uninstallGlobalUnhandledRejectionHandler() {\n    if (_onUnhandledRejectionHandlerInstalled) {\n      window.onunhandledrejection = _oldOnunhandledrejectionHandler;\n      _onUnhandledRejectionHandlerInstalled = false;\n    }\n  }\n\n  /**\n   * Process the most recent exception\n   * @memberof TraceKit.report\n   */\n  function processLastException() {\n    var _lastExceptionStack = lastExceptionStack,\n      _lastException = lastException;\n    lastExceptionStack = null;\n    lastException = null;\n    notifyHandlers(_lastExceptionStack, false, _lastException);\n  }\n\n  /**\n   * Reports an unhandled Error to TraceKit.\n   * @param {Error} ex\n   * @memberof TraceKit.report\n   * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n   */\n  function report(ex: any) {\n    if (lastExceptionStack) {\n      if (lastException === ex) {\n        return; // already caught by an inner catch block, ignore\n      } else {\n        processLastException();\n      }\n    }\n\n    var stack = TraceKit.computeStackTrace(ex);\n    lastExceptionStack = stack;\n    lastException = ex;\n\n    // If the stack trace is incomplete, wait for 2 seconds for\n    // slow slow IE to see if onerror occurs or not before reporting\n    // this exception; otherwise, we will end up with an incomplete\n    // stack trace\n    setTimeout(\n      function() {\n        if (lastException === ex) {\n          processLastException();\n        }\n      },\n      stack.incomplete ? 2000 : 0,\n    );\n\n    throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n  }\n\n  (report as any).subscribe = subscribe;\n  (report as any).unsubscribe = unsubscribe;\n  (report as any).installGlobalHandler = installGlobalHandler;\n  (report as any).installGlobalUnhandledRejectionHandler = installGlobalUnhandledRejectionHandler;\n\n  return report;\n})();\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n  var debug = false,\n    sourceCache = {};\n\n  /**\n   * Attempts to retrieve source code via XMLHttpRequest, which is used\n   * to look up anonymous function names.\n   * @param {string} url URL of source code.\n   * @return {string} Source contents.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function loadSource(url: any) {\n    if (!TraceKit.remoteFetching) {\n      //Only attempt request if remoteFetching is on.\n      return '';\n    }\n    try {\n      var getXHR = function() {\n        try {\n          return new (window as any).XMLHttpRequest();\n        } catch (e) {\n          // explicitly bubble up the exception if not found\n          return new (window as any).ActiveXObject('Microsoft.XMLHTTP');\n        }\n      };\n\n      var request = getXHR();\n      request.open('GET', url, false);\n      request.send('');\n      return request.responseText;\n    } catch (e) {\n      return '';\n    }\n  }\n\n  /**\n   * Retrieves source code from the source code cache.\n   * @param {string} url URL of source code.\n   * @return {Array.<string>} Source contents.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function getSource(url: any) {\n    if (typeof url !== 'string') {\n      return [];\n    }\n\n    if (!_has(sourceCache, url)) {\n      // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n      // cross-domain errors will be triggered.\n      /*\n                  Regex matches:\n                  0 - Full Url\n                  1 - Protocol\n                  2 - Domain\n                  3 - Port (Useful for internal applications)\n                  4 - Path\n              */\n      var source = '';\n      var domain = '';\n      try {\n        domain = window.document.domain;\n      } catch (e) {}\n      var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n      if (match && match[2] === domain) {\n        source = loadSource(url);\n      }\n      (sourceCache as any)[url] = source ? source.split('\\n') : [];\n    }\n\n    return (sourceCache as any)[url];\n  }\n\n  /**\n   * Tries to use an externally loaded copy of source code to determine\n   * the name of a function by looking at the name of the variable it was\n   * assigned to, if any.\n   * @param {string} url URL of source code.\n   * @param {(string|number)} lineNo Line number in source code.\n   * @return {string} The function name, if discoverable.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function guessFunctionName(url: any, lineNo: any) {\n    var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n      reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n      line = '',\n      maxLines = 10,\n      source = getSource(url),\n      m;\n\n    if (!source.length) {\n      return UNKNOWN_FUNCTION;\n    }\n\n    // Walk backwards from the first line in the function until we find the line which\n    // matches the pattern above, which is the function definition\n    for (var i = 0; i < maxLines; ++i) {\n      line = source[lineNo - i] + line;\n\n      if (!isUndefined(line)) {\n        if ((m = reGuessFunction.exec(line))) {\n          return m[1];\n        } else if ((m = reFunctionArgNames.exec(line))) {\n          return m[1];\n        }\n      }\n    }\n\n    return UNKNOWN_FUNCTION;\n  }\n\n  /**\n   * Retrieves the surrounding lines from where an exception occurred.\n   * @param {string} url URL of source code.\n   * @param {(string|number)} line Line number in source code to center around for context.\n   * @return {?Array.<string>} Lines of source code.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function gatherContext(url: any, line: any) {\n    var source = getSource(url);\n\n    if (!source.length) {\n      return null;\n    }\n\n    var context = [],\n      // linesBefore & linesAfter are inclusive with the offending line.\n      // if linesOfContext is even, there will be one extra line\n      //   *before* the offending line.\n      linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n      // Add one extra line if linesOfContext is odd\n      linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n      start = Math.max(0, line - linesBefore - 1),\n      end = Math.min(source.length, line + linesAfter - 1);\n\n    line -= 1; // convert to 0-based index\n\n    for (var i = start; i < end; ++i) {\n      if (!isUndefined(source[i])) {\n        context.push(source[i]);\n      }\n    }\n\n    return context.length > 0 ? context : null;\n  }\n\n  /**\n   * Escapes special characters, except for whitespace, in a string to be\n   * used inside a regular expression as a string literal.\n   * @param {string} text The string.\n   * @return {string} The escaped string literal.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function escapeRegExp(text: any) {\n    return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n  }\n\n  /**\n   * Escapes special characters in a string to be used inside a regular\n   * expression as a string literal. Also ensures that HTML entities will\n   * be matched the same as their literal friends.\n   * @param {string} body The string.\n   * @return {string} The escaped string.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function escapeCodeAsRegExpForMatchingInsideHTML(body: any) {\n    return escapeRegExp(body)\n      .replace('<', '(?:<|&lt;)')\n      .replace('>', '(?:>|&gt;)')\n      .replace('&', '(?:&|&amp;)')\n      .replace('\"', '(?:\"|&quot;)')\n      .replace(/\\s+/g, '\\\\s+');\n  }\n\n  /**\n   * Determines where a code fragment occurs in the source code.\n   * @param {RegExp} re The function definition.\n   * @param {Array.<string>} urls A list of URLs to search.\n   * @return {?Object.<string, (string|number)>} An object containing\n   * the url, line, and column number of the defined function.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function findSourceInUrls(re: any, urls: any) {\n    var source, m;\n    for (var i = 0, j = urls.length; i < j; ++i) {\n      if ((source = getSource(urls[i])).length) {\n        source = source.join('\\n');\n        if ((m = re.exec(source))) {\n          return {\n            url: urls[i],\n            line: source.substring(0, m.index).split('\\n').length,\n            column: m.index - source.lastIndexOf('\\n', m.index) - 1,\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Determines at which column a code fragment occurs on a line of the\n   * source code.\n   * @param {string} fragment The code fragment.\n   * @param {string} url The URL to search.\n   * @param {(string|number)} line The line number to examine.\n   * @return {?number} The column number.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function findSourceInLine(fragment: any, url: any, line: any) {\n    var source = getSource(url),\n      re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n      m;\n\n    line -= 1;\n\n    if (source && source.length > line && (m = re.exec(source[line]))) {\n      return m.index;\n    }\n\n    return null;\n  }\n\n  /**\n   * Determines where a function was defined within the source code.\n   * @param {(Function|string)} func A function reference or serialized\n   * function definition.\n   * @return {?Object.<string, (string|number)>} An object containing\n   * the url, line, and column number of the defined function.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function findSourceByFunctionBody(func: any) {\n    if (isUndefined(window && window.document)) {\n      return;\n    }\n\n    var urls = [getLocationHref()],\n      scripts = window.document.getElementsByTagName('script'),\n      body,\n      code = '' + func,\n      codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n      eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n      re,\n      parts,\n      result;\n\n    for (var i = 0; i < scripts.length; ++i) {\n      var script = scripts[i];\n      if (script.src) {\n        urls.push(script.src);\n      }\n    }\n\n    if (!(parts = codeRE.exec(code))) {\n      re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n    }\n\n    // not sure if this is really necessary, but I don’t have a test\n    // corpus large enough to confirm that and it was in the original.\n    else {\n      var name = parts[1] ? '\\\\s+' + parts[1] : '',\n        args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n      body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n      re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n    }\n\n    // look for a normal function definition\n    if ((result = findSourceInUrls(re, urls))) {\n      return result;\n    }\n\n    // look for an old-school event handler function\n    if ((parts = eventRE.exec(code))) {\n      var event = parts[1];\n      body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n      // look for a function defined in HTML as an onXXX handler\n      re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n      if ((result = findSourceInUrls(re, urls[0]))) {\n        return result;\n      }\n\n      // look for ???\n      re = new RegExp(body);\n\n      if ((result = findSourceInUrls(re, urls))) {\n        return result;\n      }\n    }\n\n    return null;\n  }\n\n  // Contents of Exception in various browsers.\n  //\n  // SAFARI:\n  // ex.message = Can't find variable: qq\n  // ex.line = 59\n  // ex.sourceId = 580238192\n  // ex.sourceURL = http://...\n  // ex.expressionBeginOffset = 96\n  // ex.expressionCaretOffset = 98\n  // ex.expressionEndOffset = 98\n  // ex.name = ReferenceError\n  //\n  // FIREFOX:\n  // ex.message = qq is not defined\n  // ex.fileName = http://...\n  // ex.lineNumber = 59\n  // ex.columnNumber = 69\n  // ex.stack = ...stack trace... (see the example below)\n  // ex.name = ReferenceError\n  //\n  // CHROME:\n  // ex.message = qq is not defined\n  // ex.name = ReferenceError\n  // ex.type = not_defined\n  // ex.arguments = ['aa']\n  // ex.stack = ...stack trace...\n  //\n  // INTERNET EXPLORER:\n  // ex.message = ...\n  // ex.name = ReferenceError\n  //\n  // OPERA:\n  // ex.message = ...message... (see the example below)\n  // ex.name = ReferenceError\n  // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n  // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n  /**\n   * Computes stack trace information from the stack property.\n   * Chrome and Gecko use this property.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack trace information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceFromStackProp(ex: any) {\n    if (!ex.stack) {\n      return null;\n    }\n\n    var chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n      gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\\/.*?|\\[native code\\]|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n      winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n      // Used to additionally parse URL/line/column from eval frames\n      isEval,\n      geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n      chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n      lines = ex.stack.split('\\n'),\n      stack = [],\n      submatch,\n      parts,\n      element,\n      reference = /^(.*) is undefined$/.exec(ex.message);\n\n    for (var i = 0, j = lines.length; i < j; ++i) {\n      if ((parts = chrome.exec(lines[i]))) {\n        var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n        isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n        if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n          // throw out eval line/column and use top-most line/column number\n          parts[2] = submatch[1]; // url\n          // NOTE: It's messing out our integration tests in Karma, let's see if we can live with it – Kamil\n          // parts[3] = submatch[2]; // line\n          // parts[4] = submatch[3]; // column\n        }\n        element = {\n          url: !isNative ? parts[2] : null,\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: isNative ? [parts[2]] : [],\n          line: parts[3] ? +parts[3] : null,\n          column: parts[4] ? +parts[4] : null,\n        };\n      } else if ((parts = winjs.exec(lines[i]))) {\n        element = {\n          url: parts[2],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: [],\n          line: +parts[3],\n          column: parts[4] ? +parts[4] : null,\n        };\n      } else if ((parts = gecko.exec(lines[i]))) {\n        isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n        if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n          // throw out eval line/column and use top-most line number\n          parts[3] = submatch[1];\n          // NOTE: It's messing out our integration tests in Karma, let's see if we can live with it – Kamil\n          // parts[4] = submatch[2];\n          // parts[5] = null; // no column when eval\n        } else if (i === 0 && !parts[5] && !isUndefined(ex.columnNumber)) {\n          // FireFox uses this awesome columnNumber property for its top frame\n          // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n          // so adding 1\n          // NOTE: this hack doesn't work if top-most frame is eval\n          stack[0].column = ex.columnNumber + 1;\n        }\n        element = {\n          url: parts[3],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: parts[2] ? parts[2].split(',') : [],\n          line: parts[4] ? +parts[4] : null,\n          column: parts[5] ? +parts[5] : null,\n        };\n      } else {\n        continue;\n      }\n\n      if (!element.func && element.line) {\n        element.func = guessFunctionName(element.url, element.line);\n      }\n\n      if (TraceKit.remoteFetching && element.url && element.url.substr(0, 5) === 'blob:') {\n        // Special case for handling JavaScript loaded into a blob.\n        // We use a synchronous AJAX request here as a blob is already in\n        // memory - it's not making a network request.  This will generate a warning\n        // in the browser console, but there has already been an error so that's not\n        // that much of an issue.\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', element.url, false);\n        xhr.send('');\n\n        // If we failed to download the source, skip this patch\n        if (xhr.status === 200) {\n          var source = xhr.responseText || '';\n\n          // We trim the source down to the last 300 characters as sourceMappingURL is always at the end of the file.\n          // Why 300? To be in line with: https://github.com/getsentry/sentry/blob/4af29e8f2350e20c28a6933354e4f42437b4ba42/src/sentry/lang/javascript/processor.py#L164-L175\n          source = source.slice(-300);\n\n          // Now we dig out the source map URL\n          var sourceMaps = source.match(/\\/\\/# sourceMappingURL=(.*)$/);\n\n          // If we don't find a source map comment or we find more than one, continue on to the next element.\n          if (sourceMaps) {\n            var sourceMapAddress = sourceMaps[1];\n\n            // Now we check to see if it's a relative URL.\n            // If it is, convert it to an absolute one.\n            if (sourceMapAddress.charAt(0) === '~') {\n              sourceMapAddress = getLocationOrigin() + sourceMapAddress.slice(1);\n            }\n\n            // Now we strip the '.map' off of the end of the URL and update the\n            // element so that Sentry can match the map to the blob.\n            element.url = sourceMapAddress.slice(0, -4);\n          }\n        }\n      }\n\n      (element as any).context = element.line ? gatherContext(element.url, element.line) : null;\n\n      stack.push(element);\n    }\n\n    if (!stack.length) {\n      return null;\n    }\n\n    if (stack[0] && stack[0].line && !stack[0].column && reference) {\n      stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n    }\n\n    return {\n      mode: 'stack',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n  }\n\n  /**\n   * Computes stack trace information from the stacktrace property.\n   * Opera 10+ uses this property.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack trace information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceFromStacktraceProp(ex: any) {\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    var stacktrace = ex.stacktrace;\n    if (!stacktrace) {\n      return;\n    }\n\n    var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n      opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n      lines = stacktrace.split('\\n'),\n      stack = [],\n      parts;\n\n    for (var line = 0; line < lines.length; line += 2) {\n      var element = null;\n      if ((parts = opera10Regex.exec(lines[line]))) {\n        element = {\n          url: parts[2],\n          line: +parts[1],\n          column: null,\n          func: parts[3],\n          args: [],\n        };\n      } else if ((parts = opera11Regex.exec(lines[line]))) {\n        element = {\n          url: parts[6],\n          line: +parts[1],\n          column: +parts[2],\n          func: parts[3] || parts[4],\n          args: parts[5] ? parts[5].split(',') : [],\n        };\n      }\n\n      if (element) {\n        if (!element.func && element.line) {\n          element.func = guessFunctionName(element.url, element.line);\n        }\n        if (element.line) {\n          try {\n            (element as any).context = gatherContext(element.url, element.line);\n          } catch (exc) {}\n        }\n\n        if (!(element as any).context) {\n          (element as any).context = [lines[line + 1]];\n        }\n\n        stack.push(element);\n      }\n    }\n\n    if (!stack.length) {\n      return null;\n    }\n\n    return {\n      mode: 'stacktrace',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n  }\n\n  /**\n   * NOT TESTED.\n   * Computes stack trace information from an error message that includes\n   * the stack trace.\n   * Opera 9 and earlier use this method if the option to show stack\n   * traces is turned on in opera:config.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceFromOperaMultiLineMessage(ex: any) {\n    // TODO: Clean this function up\n    // Opera includes a stack trace into the exception message. An example is:\n    //\n    // Statement on line 3: Undefined variable: undefinedFunc\n    // Backtrace:\n    //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n    //         undefinedFunc(a);\n    //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n    //           zzz(x, y, z);\n    //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n    //           yyy(a, a, a);\n    //   Line 1 of function script\n    //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n    //   ...\n\n    var lines = ex.message.split('\\n');\n    if (lines.length < 4) {\n      return null;\n    }\n\n    var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n      lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n      lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n      stack = [],\n      scripts = window && window.document && window.document.getElementsByTagName('script'),\n      inlineScriptBlocks = [],\n      parts;\n\n    for (var s in scripts) {\n      if (_has(scripts, s) && !scripts[s].src) {\n        inlineScriptBlocks.push(scripts[s]);\n      }\n    }\n\n    for (var line = 2; line < lines.length; line += 2) {\n      var item = null;\n      if ((parts = lineRE1.exec(lines[line]))) {\n        item = {\n          url: parts[2],\n          func: parts[3],\n          args: [],\n          line: +parts[1],\n          column: null,\n        };\n      } else if ((parts = lineRE2.exec(lines[line]))) {\n        item = {\n          url: parts[3],\n          func: parts[4],\n          args: [],\n          line: +parts[1],\n          column: null, // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n        };\n        var relativeLine = +parts[1]; // relative to the start of the <SCRIPT> block\n        var script = inlineScriptBlocks[(parts as any)[2] - 1];\n        if (script) {\n          var source = getSource(item.url);\n          if (source) {\n            source = source.join('\\n');\n            var pos = source.indexOf(script.innerText);\n            if (pos >= 0) {\n              item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n            }\n          }\n        }\n      } else if ((parts = lineRE3.exec(lines[line]))) {\n        var url = getLocationHref().replace(/#.*$/, '');\n        var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n        var src = findSourceInUrls(re, [url]);\n        item = {\n          url: url,\n          func: '',\n          args: [],\n          line: src ? src.line : parts[1],\n          column: null,\n        };\n      }\n\n      if (item) {\n        if (!item.func) {\n          item.func = guessFunctionName(item.url, item.line);\n        }\n        var context = gatherContext(item.url, item.line);\n        var midline = context ? context[Math.floor(context.length / 2)] : null;\n        if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n          (item as any).context = context;\n        } else {\n          // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n          (item as any).context = [lines[line + 1]];\n        }\n        stack.push(item);\n      }\n    }\n    if (!stack.length) {\n      return null; // could not parse multiline exception message as Opera stack trace\n    }\n\n    return {\n      mode: 'multiline',\n      name: ex.name,\n      message: lines[0],\n      stack: stack,\n    };\n  }\n\n  /**\n   * Adds information about the first frame to incomplete stack traces.\n   * Safari and IE require this to get complete data on the first frame.\n   * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n   * one of the compute* methods.\n   * @param {string} url The URL of the script that caused an error.\n   * @param {(number|string)} lineNo The line number of the script that\n   * caused an error.\n   * @param {string=} message The error generated by the browser, which\n   * hopefully contains the name of the object that caused the error.\n   * @return {boolean} Whether or not the stack information was\n   * augmented.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function augmentStackTraceWithInitialElement(stackInfo: any, url: any, lineNo: any, message: any) {\n    var initial = {\n      url: url,\n      line: lineNo,\n    };\n\n    if (initial.url && initial.line) {\n      stackInfo.incomplete = false;\n\n      if (!(initial as any).func) {\n        (initial as any).func = guessFunctionName(initial.url, initial.line);\n      }\n\n      if (!(initial as any).context) {\n        (initial as any).context = gatherContext(initial.url, initial.line);\n      }\n\n      var reference = / '([^']+)' /.exec(message);\n      if (reference) {\n        (initial as any).column = findSourceInLine(reference[1], initial.url, initial.line);\n      }\n\n      if (stackInfo.stack.length > 0) {\n        if (stackInfo.stack[0].url === initial.url) {\n          if (stackInfo.stack[0].line === initial.line) {\n            return false; // already in stack trace\n          } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === (initial as any).func) {\n            stackInfo.stack[0].line = initial.line;\n            stackInfo.stack[0].context = (initial as any).context;\n            return false;\n          }\n        }\n      }\n\n      stackInfo.stack.unshift(initial);\n      stackInfo.partial = true;\n      return true;\n    } else {\n      stackInfo.incomplete = true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Computes stack trace information by walking the arguments.caller\n   * chain at the time the exception occurred. This will cause earlier\n   * frames to be missed but is the only way to get any stack trace in\n   * Safari and IE. The top frame is restored by\n   * {@link augmentStackTraceWithInitialElement}.\n   * @param {Error} ex\n   * @return {TraceKit.StackTrace=} Stack trace information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceByWalkingCallerChain(ex: any, depth: any) {\n    var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n      stack = [],\n      funcs = {},\n      recursion = false,\n      parts,\n      item,\n      source;\n\n    for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n      if (curr === computeStackTrace || curr === TraceKit.report) {\n        continue;\n      }\n\n      item = {\n        url: null,\n        func: UNKNOWN_FUNCTION,\n        args: [],\n        line: null,\n        column: null,\n      };\n\n      if (curr.name) {\n        item.func = curr.name;\n      } else if ((parts = functionName.exec(curr.toString()))) {\n        item.func = parts[1];\n      }\n\n      if (typeof item.func === 'undefined') {\n        try {\n          item.func = (parts as any).input.substring(0, (parts as any).input.indexOf('{'));\n        } catch (e) {}\n      }\n\n      if ((source = findSourceByFunctionBody(curr))) {\n        item.url = source.url;\n        item.line = source.line;\n\n        if (item.func === UNKNOWN_FUNCTION) {\n          item.func = guessFunctionName(item.url, item.line);\n        }\n\n        var reference = / '([^']+)' /.exec(ex.message || ex.description);\n        if (reference) {\n          (item as any).column = findSourceInLine(reference[1], source.url, source.line);\n        }\n      }\n\n      if ((funcs as any)['' + curr]) {\n        recursion = true;\n      } else {\n        (funcs as any)['' + curr] = true;\n      }\n\n      stack.push(item);\n    }\n\n    if (depth) {\n      stack.splice(0, depth);\n    }\n\n    var result = {\n      mode: 'callers',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n    augmentStackTraceWithInitialElement(\n      result,\n      ex.sourceURL || ex.fileName,\n      ex.line || ex.lineNumber,\n      ex.message || ex.description,\n    );\n    return result;\n  }\n\n  /**\n   * Computes a stack trace for an exception.\n   * @param {Error} ex\n   * @param {(string|number)=} depth\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTrace(ex: any, depth: any) {\n    var stack = null;\n    depth = depth == null ? 0 : +depth;\n\n    try {\n      // This must be tried first because Opera 10 *destroys*\n      // its stacktrace property if you try to access the stack\n      // property first!!\n      stack = computeStackTraceFromStacktraceProp(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {\n      if (debug) {\n        throw e;\n      }\n    }\n\n    try {\n      stack = computeStackTraceFromStackProp(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {\n      if (debug) {\n        throw e;\n      }\n    }\n\n    try {\n      stack = computeStackTraceFromOperaMultiLineMessage(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {\n      if (debug) {\n        throw e;\n      }\n    }\n\n    try {\n      stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {\n      if (debug) {\n        throw e;\n      }\n    }\n\n    return {\n      original: ex,\n      name: ex.name,\n      message: ex.message,\n      mode: 'failed',\n    };\n  }\n\n  /**\n   * Logs a stacktrace starting from the previous call and working down.\n   * @param {(number|string)=} depth How many frames deep to trace.\n   * @return {TraceKit.StackTrace} Stack trace information.\n   * @memberof TraceKit.computeStackTrace\n   */\n  function computeStackTraceOfCaller(depth: any) {\n    depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n    try {\n      throw new Error();\n    } catch (ex) {\n      return computeStackTrace(ex, depth + 1);\n    }\n  }\n\n  (computeStackTrace as any).augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n  (computeStackTrace as any).computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n  (computeStackTrace as any).guessFunctionName = guessFunctionName;\n  (computeStackTrace as any).gatherContext = gatherContext;\n  (computeStackTrace as any).ofCaller = computeStackTraceOfCaller;\n  (computeStackTrace as any).getSource = getSource;\n\n  return computeStackTrace;\n})();\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function() {\n  var _helper = function _helper(fnName: any) {\n    var originalFn = (window as any)[fnName];\n    (window as any)[fnName] = function traceKitAsyncExtension() {\n      // Make a copy of the arguments\n      var args = _slice.call(arguments);\n      var originalCallback = args[0];\n      if (typeof originalCallback === 'function') {\n        args[0] = TraceKit.wrap(originalCallback);\n      }\n      // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n      // also only supports 2 argument and doesn't care what \"this\" is, so we\n      // can just call the original function directly.\n      if (originalFn.apply) {\n        return originalFn.apply(this, args);\n      } else {\n        return originalFn(args[0], args[1]);\n      }\n    };\n  };\n\n  _helper('setTimeout');\n  _helper('setInterval');\n};\n\nTraceKit.remoteFetching = false;\nTraceKit.collectWindowErrors = true;\nTraceKit.linesOfContext = 11;\n\nconst report: Report = TraceKit.report;\nconst subscribe = TraceKit.report.subscribe;\nconst installGlobalHandler = TraceKit.report.installGlobalHandler;\nconst installGlobalUnhandledRejectionHandler = TraceKit.report.installGlobalUnhandledRejectionHandler;\nconst computeStackTrace: ComputeStackTrace = TraceKit.computeStackTrace;\n\nexport { report, subscribe, installGlobalHandler, installGlobalUnhandledRejectionHandler, computeStackTrace };\n","import { SentryEvent, SentryException, StackFrame } from '@sentry/types';\nimport { limitObjectDepthToSize, serializeKeysToEventMessage } from '@sentry/utils/object';\nimport { includes } from '@sentry/utils/string';\nimport { md5 } from './md5';\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): SentryException {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: SentryException = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  // tslint:disable-next-line:strict-type-predicates\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/** JSDoc */\nexport function eventFromPlainObject(exception: {}, syntheticException: Error | null): SentryEvent {\n  const exceptionKeys = Object.keys(exception).sort();\n  const event: SentryEvent = {\n    extra: {\n      __serialized__: limitObjectDepthToSize(exception),\n    },\n    fingerprint: [md5(exceptionKeys.join(''))],\n    message: `Non-Error exception captured with keys: ${serializeKeysToEventMessage(exceptionKeys)}`,\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/** JSDoc */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): SentryEvent {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/** JSDoc */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (includes(firstFrameFunction, 'captureMessage') || includes(firstFrameFunction, 'captureException')) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (includes(lastFrameFunction, 'sentryWrapped')) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line,\n      }),\n    )\n    .slice(0, STACKTRACE_LIMIT)\n    .reverse();\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n */\nexport function addExceptionTypeValue(event: SentryEvent, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n","import { API, PromiseBuffer, SentryError } from '@sentry/core';\nimport { SentryResponse, Transport, TransportOptions } from '@sentry/types';\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public url: string;\n\n  /** A simple buffer holding all requests. */\n  protected readonly buffer: PromiseBuffer<SentryResponse> = new PromiseBuffer(30);\n\n  public constructor(public options: TransportOptions) {\n    this.url = new API(this.options.dsn).getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(_: string): Promise<SentryResponse> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async close(timeout?: number): Promise<boolean> {\n    return this.buffer.drain(timeout);\n  }\n}\n","import { captureException, getCurrentHub, withScope } from '@sentry/core';\nimport { Mechanism, SentryEvent, SentryWrappedFunction } from '@sentry/types';\nimport { isFunction } from '@sentry/utils/is';\nimport { htmlTreeAsString } from '@sentry/utils/misc';\nimport { serializeObject } from '@sentry/utils/object';\n\nconst debounceDuration: number = 1000;\nlet keypressTimeout: number | undefined;\nlet lastCapturedEvent: Event | undefined;\nlet ignoreOnError: number = 0;\n\n/** JSDoc */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n/** JSDoc */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n */\nexport function wrap(\n  fn: SentryWrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: SentryWrappedFunction,\n): any {\n  if (!isFunction(fn)) {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  const sentryWrapped: SentryWrappedFunction = function(this: any): void {\n    if (before && isFunction(before)) {\n      before.apply(this, arguments);\n    }\n\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means Raven caught an error invoking your application code. This is\n      //       expected behavior and NOT indicative of a bug with Raven.js.\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        return fn.handleEvent.apply(this, wrappedArguments);\n      } else {\n        return fn.apply(this, wrappedArguments);\n      }\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope(async scope => {\n        scope.addEventProcessor(async (event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            processedEvent.exception = processedEvent.exception || {};\n            processedEvent.exception.mechanism = options.mechanism;\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: serializeObject(args, 2),\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // tslint:disable-line:no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  return sentryWrapped;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param eventName the event name (e.g. \"click\")\n * @returns wrapped breadcrumb events handler\n */\nexport function breadcrumbEventHandler(eventName: string): (event: Event) => void {\n  return (event: Event) => {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined;\n\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n    if (lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    // try/catch both:\n    // - accessing event.target (see getsentry/raven-js#838, #768)\n    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n    //   can throw an exception in some circumstances.\n    let target;\n    try {\n      target = htmlTreeAsString(event.target as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${eventName}`, // e.g. ui.click, ui.input\n        message: target,\n      },\n      {\n        event,\n        name: eventName,\n      },\n    );\n  };\n}\n\n/**\n * Wraps addEventListener to capture keypress UI events\n * @returns wrapped keypress events handler\n */\nexport function keypressEventHandler(): (event: Event) => void {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return (event: Event) => {\n    let target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    const tagName = target && (target as HTMLElement).tagName;\n\n    // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n    if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !(target as HTMLElement).isContentEditable)) {\n      return;\n    }\n\n    // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n    if (!keypressTimeout) {\n      breadcrumbEventHandler('input')(event);\n    }\n    clearTimeout(keypressTimeout);\n\n    keypressTimeout = (setTimeout(() => {\n      keypressTimeout = undefined;\n    }, debounceDuration) as any) as number;\n  };\n}\n","import { SentryResponse, Status } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\nimport { supportsReferrerPolicy } from '@sentry/utils/supports';\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject() as Window;\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(body: string): Promise<SentryResponse> {\n    const defaultOptions: RequestInit = {\n      body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n\n    return this.buffer.add(\n      global.fetch(this.url, defaultOptions).then(response => ({\n        status: Status.fromHttpCode(response.status),\n      })),\n    );\n  }\n}\n","import { SentryResponse, Status } from '@sentry/types';\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(body: string): Promise<SentryResponse> {\n    return this.buffer.add(\n      new Promise<SentryResponse>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = () => {\n          if (request.readyState !== 4) {\n            return;\n          }\n\n          if (request.status === 200) {\n            resolve({\n              status: Status.fromHttpCode(request.status),\n            });\n          }\n\n          reject(request);\n        };\n\n        request.open('POST', this.url);\n        request.send(body);\n      }),\n    );\n  }\n}\n","import { SentryResponse, Status } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject() as Window;\n\n/** `sendBeacon` based transport */\nexport class BeaconTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(body: string): Promise<SentryResponse> {\n    const result = global.navigator.sendBeacon(this.url, body);\n\n    return this.buffer.add(\n      Promise.resolve({\n        status: result ? Status.Success : Status.Failed,\n      }),\n    );\n  }\n}\n","import { BaseBackend, Options, SentryError } from '@sentry/core';\nimport { SentryEvent, SentryEventHint, Severity, Transport } from '@sentry/types';\nimport { isDOMError, isDOMException, isError, isErrorEvent, isPlainObject } from '@sentry/utils/is';\nimport { supportsBeacon, supportsFetch } from '@sentry/utils/supports';\nimport { addExceptionTypeValue, eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\nimport { BeaconTransport, FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To whitelist certain errors instead, use {@link Options.whitelistUrls}.\n   * By default, all errors will be sent.\n   */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.blacklistUrls}.\n   * By default, all errors will be sent.\n   */\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/** The Sentry Browser SDK Backend. */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public install(): boolean {\n    // We are only called by the client if the SDK is enabled and a valid Dsn\n    // has been configured. If no Dsn is present, this indicates a programming\n    // error.\n    const dsn = this.options.dsn;\n    if (!dsn) {\n      throw new SentryError('Invariant exception: install() must not be called when disabled');\n    }\n\n    Error.stackTraceLimit = 50;\n\n    return true;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected setupTransport(): Transport {\n    if (!this.options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super.setupTransport();\n    }\n\n    const transportOptions = this.options.transportOptions ? this.options.transportOptions : { dsn: this.options.dsn };\n\n    if (this.options.transport) {\n      return new this.options.transport(transportOptions);\n    } else if (supportsBeacon()) {\n      return new BeaconTransport(transportOptions);\n    } else if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(exception: any, hint?: SentryEventHint): Promise<SentryEvent> {\n    let event;\n\n    if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n      // If it is an ErrorEvent with `error` property, extract it to get actual Error\n      const ex = exception as ErrorEvent;\n      exception = ex.error; // tslint:disable-line:no-parameter-reassignment\n      event = eventFromStacktrace(computeStackTrace(exception as Error));\n    } else if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n      // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n      // then we just extract the name and message, as they don't provide anything else\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n      const ex = exception as DOMException;\n      const name = ex.name || (isDOMError(ex) ? 'DOMError' : 'DOMException');\n      const message = ex.message ? `${name}: ${ex.message}` : name;\n\n      event = await this.eventFromMessage(message, Severity.Error, hint);\n      addExceptionTypeValue(event, message);\n    } else if (isError(exception as Error)) {\n      // we have a real Error object, do nothing\n      event = eventFromStacktrace(computeStackTrace(exception as Error));\n    } else if (isPlainObject(exception as {}) && hint && hint.syntheticException) {\n      // If it is plain Object, serialize it manually and extract options\n      // This will allow us to group events based on top-level keys\n      // which is much better than creating new group when any key/value change\n      const ex = exception as {};\n      event = eventFromPlainObject(ex, hint.syntheticException);\n      addExceptionTypeValue(event, 'Custom Object');\n    } else {\n      // If none of previous checks were valid, then it means that\n      // it's not a DOMError/DOMException\n      // it's not a plain Object\n      // it's not a valid ErrorEvent (one with an error property)\n      // it's not an Error\n      // So bail out and capture it as a simple message:\n      const ex = exception as string;\n      event = await this.eventFromMessage(ex, undefined, hint);\n      addExceptionTypeValue(event, `${ex}`);\n    }\n\n    event = {\n      ...event,\n      event_id: hint && hint.event_id,\n      exception: {\n        ...event.exception,\n        mechanism: {\n          handled: true,\n          type: 'generic',\n        },\n      },\n    };\n\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(\n    message: string,\n    level: Severity = Severity.Info,\n    hint?: SentryEventHint,\n  ): Promise<SentryEvent> {\n    const event: SentryEvent = {\n      event_id: hint && hint.event_id,\n      level,\n      message,\n    };\n\n    if (this.options.attachStacktrace && hint && hint.syntheticException) {\n      const stacktrace = computeStackTrace(hint.syntheticException);\n      const frames = prepareFramesForEvent(stacktrace.stack);\n      event.stacktrace = {\n        frames,\n      };\n    }\n\n    return event;\n  }\n}\n","export const SDK_NAME = 'sentry.javascript.browser';\nexport const SDK_VERSION = '4.5.4';\n","import { API, BaseClient, Scope, SentryError } from '@sentry/core';\nimport { DsnLike, SentryEvent, SentryEventHint } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n}\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected async prepareEvent(event: SentryEvent, scope?: Scope, hint?: SentryEventHint): Promise<SentryEvent | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super.prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = (getGlobalObject() as Window).document;\n    if (!document) {\n      return;\n    }\n\n    const dsn = options.dsn || this.getDsn();\n\n    if (!options.eventId) {\n      throw new SentryError('Missing `eventId` option in showReportDialog call');\n    }\n\n    if (!dsn) {\n      throw new SentryError('Missing `Dsn` option in showReportDialog call');\n    }\n\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = new API(dsn).getReportDialogEndpoint(options);\n    (document.head || document.body).appendChild(script);\n  }\n}\n","import { getCurrentHub } from '@sentry/core';\nimport { Integration, SentryEvent } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { safeNormalize, serialize } from '@sentry/utils/object';\nimport { truncate } from '@sentry/utils/string';\nimport { addExceptionTypeValue, eventFromStacktrace } from '../parsers';\nimport {\n  installGlobalHandler,\n  installGlobalUnhandledRejectionHandler,\n  StackTrace as TraceKitStackTrace,\n  subscribe,\n} from '../tracekit';\nimport { shouldIgnoreOnError } from './helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /** JSDoc */\n  private readonly options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this.options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    subscribe((stack: TraceKitStackTrace, _: boolean, error: Error) => {\n      // TODO: use stack.context to get a valuable information from TraceKit, eg.\n      // [\n      //   0: \"  })\"\n      //   1: \"\"\n      //   2: \"  function foo () {\"\n      //   3: \"    Sentry.captureException('some error')\"\n      //   4: \"    Sentry.captureMessage('some message')\"\n      //   5: \"    throw 'foo'\"\n      //   6: \"  }\"\n      //   7: \"\"\n      //   8: \"  function bar () {\"\n      //   9: \"    foo();\"\n      //   10: \"  }\"\n      // ]\n      if (shouldIgnoreOnError()) {\n        return;\n      }\n      const self = getCurrentHub().getIntegration(GlobalHandlers);\n      if (self) {\n        getCurrentHub().captureEvent(self.eventFromGlobalHandler(stack), { originalException: error, data: { stack } });\n      }\n    });\n\n    if (this.options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      installGlobalHandler();\n    }\n\n    if (this.options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      installGlobalUnhandledRejectionHandler();\n    }\n  }\n\n  /**\n   * This function creates an SentryEvent from an TraceKitStackTrace.\n   *\n   * @param stacktrace TraceKitStackTrace to be converted to an SentryEvent.\n   */\n  private eventFromGlobalHandler(stacktrace: TraceKitStackTrace): SentryEvent {\n    const event = eventFromStacktrace(stacktrace);\n\n    const data: { [key: string]: string } = {\n      mode: stacktrace.mode,\n    };\n\n    if (stacktrace.message) {\n      data.message = stacktrace.message;\n    }\n\n    if (stacktrace.name) {\n      data.name = stacktrace.name;\n    }\n\n    const newEvent: SentryEvent = {\n      ...event,\n      exception: {\n        ...event.exception,\n        mechanism: {\n          data,\n          handled: false,\n          type: stacktrace.mechanism,\n        },\n      },\n    };\n\n    const fallbackValue =\n      typeof stacktrace.original !== 'undefined'\n        ? `${truncate(serialize(safeNormalize(stacktrace.original)), 300)}`\n        : '';\n    const fallbackType = stacktrace.mechanism === 'onunhandledrejection' ? 'UnhandledRejection' : 'Error';\n\n    // This makes sure we have type/value in every exception\n    addExceptionTypeValue(newEvent, fallbackValue, fallbackType);\n\n    return newEvent;\n  }\n}\n","import { Integration, SentryWrappedFunction } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\nimport { fill } from '@sentry/utils/object';\nimport { breadcrumbEventHandler, keypressEventHandler, wrap } from './helpers';\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /** JSDoc */\n  private ignoreOnError: number = 0;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /** JSDoc */\n  private wrapTimeFunction(original: () => void): () => number {\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  private wrapRAF(original: any): (callback: () => void) => any {\n    return function(this: any, callback: () => void): () => void {\n      return original(\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private wrapEventTarget(target: string): void {\n    const global = getGlobalObject() as { [key: string]: any };\n    const proto = global[target] && global[target].prototype;\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n        // so that we don't have more than one wrapper function\n        let before: any;\n        let clickHandler: any;\n        let keypressHandler: any;\n\n        if (target === 'EventTarget' || target === 'Node') {\n          // NOTE: generating multiple handlers per addEventListener invocation, should\n          //       revisit and verify we can just use one (almost certainly)\n          clickHandler = breadcrumbEventHandler('click');\n          keypressHandler = keypressEventHandler();\n          before = function(event: Event): any {\n            // need to intercept every DOM event in `before` argument, in case that\n            // same wrapped method is re-used for different events (e.g. mousemove THEN click)\n            // see #724\n            if (!event) {\n              return;\n            }\n\n            let eventType;\n            try {\n              eventType = event.type;\n            } catch (e) {\n              // just accessing event properties can throw an exception in some rare circumstances\n              // see: https://github.com/getsentry/raven-js/issues/838\n              return;\n            }\n            if (eventType === 'click') {\n              return clickHandler(event);\n            } else if (eventType === 'keypress') {\n              return keypressHandler(event);\n            }\n          };\n        }\n\n        return original.call(\n          this,\n          eventName,\n          wrap(\n            (fn as any) as SentryWrappedFunction,\n            {\n              mechanism: {\n                data: {\n                  function: 'addEventListener',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            },\n            before,\n          ),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        let callback = (fn as any) as SentryWrappedFunction;\n        try {\n          callback = callback && (callback.__sentry_wrapped__ || callback);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, callback, options);\n      };\n    });\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    this.ignoreOnError = this.ignoreOnError;\n\n    const global = getGlobalObject();\n\n    fill(global, 'setTimeout', this.wrapTimeFunction.bind(this));\n    fill(global, 'setInterval', this.wrapTimeFunction.bind(this));\n    fill(global, 'requestAnimationFrame', this.wrapRAF.bind(this));\n\n    [\n      'EventTarget',\n      'Window',\n      'Node',\n      'ApplicationCache',\n      'AudioTrackList',\n      'ChannelMergerNode',\n      'CryptoOperation',\n      'EventSource',\n      'FileReader',\n      'HTMLUnknownElement',\n      'IDBDatabase',\n      'IDBRequest',\n      'IDBTransaction',\n      'KeyOperation',\n      'MediaController',\n      'MessagePort',\n      'ModalWindow',\n      'Notification',\n      'SVGElementInstance',\n      'Screen',\n      'TextTrack',\n      'TextTrackCue',\n      'TextTrackList',\n      'WebSocket',\n      'WebSocketWorker',\n      'Worker',\n      'XMLHttpRequest',\n      'XMLHttpRequestEventTarget',\n      'XMLHttpRequestUpload',\n    ].forEach(this.wrapEventTarget.bind(this));\n  }\n}\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn: any): string {\n  try {\n    return (fn && fn.name) || '<anonymous>';\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return '<anonymous>';\n  }\n}\n","import { API, getCurrentHub } from '@sentry/core';\nimport { Breadcrumb, Integration, SentryBreadcrumbHint, Severity } from '@sentry/types';\nimport { isFunction, isString } from '@sentry/utils/is';\nimport { logger } from '@sentry/utils/logger';\nimport { getEventDescription, getGlobalObject, parseUrl } from '@sentry/utils/misc';\nimport { deserialize, fill, serializeObject } from '@sentry/utils/object';\nimport { includes, safeJoin } from '@sentry/utils/string';\nimport { supportsBeacon, supportsHistory, supportsNativeFetch } from '@sentry/utils/supports';\nimport { BrowserClient } from '../client';\nimport { breadcrumbEventHandler, keypressEventHandler, wrap } from './helpers';\n\nconst global = getGlobalObject() as Window;\nlet lastHref: string | undefined;\n\n/** JSDoc */\nexport interface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n  };\n}\n\n/** JSDoc */\ninterface BreadcrumbIntegrations {\n  beacon?: boolean;\n  console?: boolean;\n  dom?: boolean;\n  fetch?: boolean;\n  history?: boolean;\n  sentry?: boolean;\n  xhr?: boolean;\n}\n\n/** Default Breadcrumbs instrumentations */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /** JSDoc */\n  private readonly options: BreadcrumbIntegrations;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: BreadcrumbIntegrations) {\n    this.options = {\n      beacon: true,\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /** JSDoc */\n  private instrumentBeacon(): void {\n    if (!supportsBeacon()) {\n      return;\n    }\n\n    /** JSDoc */\n    function beaconReplacementFunction(originalBeaconFunction: () => void): () => void {\n      return function(this: History, ...args: any[]): void {\n        const url = args[0];\n        const data = args[1];\n        // If the browser successfully queues the request for delivery, the method returns \"true\" and returns \"false\" otherwise.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API/Using_the_Beacon_API\n        const result = originalBeaconFunction.apply(this, args);\n\n        const client = getCurrentHub().getClient() as BrowserClient;\n        const dsn = client && client.getDsn();\n        if (dsn) {\n          const filterUrl = new API(dsn).getStoreEndpoint();\n          // if Sentry key appears in URL, don't capture it as a request\n          // but rather as our own 'sentry' type breadcrumb\n          if (filterUrl && includes(url, filterUrl)) {\n            addSentryBreadcrumb(data);\n            return result;\n          }\n        }\n\n        // What is wrong with you TypeScript...\n        const breadcrumbData = ({\n          category: 'beacon',\n          data,\n          type: 'http',\n        } as any) as { [key: string]: any };\n\n        if (!result) {\n          breadcrumbData.level = Severity.Error;\n        }\n\n        Breadcrumbs.addBreadcrumb(breadcrumbData, {\n          input: args,\n          result,\n        });\n\n        return result;\n      };\n    }\n\n    fill(global.navigator, 'sendBeacon', beaconReplacementFunction);\n  }\n\n  /** JSDoc */\n  private instrumentConsole(): void {\n    if (!('console' in global)) {\n      return;\n    }\n    ['debug', 'info', 'warn', 'error', 'log'].forEach(function(level: string): void {\n      if (!(level in global.console)) {\n        return;\n      }\n\n      fill(global.console, level, function(originalConsoleLevel: () => any): any {\n        return function(...args: any[]): any {\n          const breadcrumbData = {\n            category: 'console',\n            data: {\n              extra: {\n                arguments: serializeObject(args, 2),\n              },\n              logger: 'console',\n            },\n            level: Severity.fromString(level),\n            message: safeJoin(args, ' '),\n          };\n\n          if (level === 'assert') {\n            if (args[0] === false) {\n              breadcrumbData.message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n              breadcrumbData.data.extra.arguments = serializeObject(args.slice(1), 2);\n            }\n          }\n\n          Breadcrumbs.addBreadcrumb(breadcrumbData, {\n            input: args,\n            level,\n          });\n\n          // this fails for some browsers. :(\n          if (originalConsoleLevel) {\n            Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n          }\n        };\n      });\n    });\n  }\n\n  /** JSDoc */\n  private instrumentDOM(): void {\n    if (!('document' in global)) {\n      return;\n    }\n    // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n    // to the document. Do this before we instrument addEventListener.\n    global.document.addEventListener('click', breadcrumbEventHandler('click'), false);\n    global.document.addEventListener('keypress', keypressEventHandler(), false);\n  }\n\n  /** JSDoc */\n  private instrumentFetch(): void {\n    if (!supportsNativeFetch()) {\n      return;\n    }\n\n    fill(global, 'fetch', function(originalFetch: () => void): () => void {\n      return function(...args: any[]): void {\n        const fetchInput = args[0];\n        let method = 'GET';\n        let url;\n\n        if (typeof fetchInput === 'string') {\n          url = fetchInput;\n        } else if ('Request' in global && fetchInput instanceof Request) {\n          url = fetchInput.url;\n          if (fetchInput.method) {\n            method = fetchInput.method;\n          }\n        } else {\n          url = String(fetchInput);\n        }\n\n        if (args[1] && args[1].method) {\n          method = args[1].method;\n        }\n\n        const client = getCurrentHub().getClient() as BrowserClient;\n        const dsn = client && client.getDsn();\n        if (dsn) {\n          const filterUrl = new API(dsn).getStoreEndpoint();\n          // if Sentry key appears in URL, don't capture it as a request\n          // but rather as our own 'sentry' type breadcrumb\n          if (filterUrl && includes(url, filterUrl)) {\n            if (method === 'POST' && args[1] && args[1].body) {\n              addSentryBreadcrumb(args[1].body);\n            }\n            return originalFetch.apply(global, args);\n          }\n        }\n\n        const fetchData: {\n          method: string;\n          url: string;\n          status_code?: number;\n        } = {\n          method,\n          url,\n        };\n\n        return originalFetch\n          .apply(global, args)\n          .then((response: Response) => {\n            fetchData.status_code = response.status;\n            Breadcrumbs.addBreadcrumb(\n              {\n                category: 'fetch',\n                data: fetchData,\n                type: 'http',\n              },\n              {\n                input: args,\n                response,\n              },\n            );\n            return response;\n          })\n          .catch((error: Error) => {\n            Breadcrumbs.addBreadcrumb(\n              {\n                category: 'fetch',\n                data: fetchData,\n                level: Severity.Error,\n                type: 'http',\n              },\n              {\n                error,\n                input: args,\n              },\n            );\n\n            throw error;\n          });\n      };\n    });\n  }\n\n  /** JSDoc */\n  private instrumentHistory(): void {\n    if (!supportsHistory()) {\n      return;\n    }\n\n    const captureUrlChange = (from: string | undefined, to: string | undefined): void => {\n      const parsedLoc = parseUrl(global.location.href);\n      const parsedTo = parseUrl(to as string);\n      let parsedFrom = parseUrl(from as string);\n\n      // Initial pushState doesn't provide `from` information\n      if (!parsedFrom.path) {\n        parsedFrom = parsedLoc;\n      }\n\n      // because onpopstate only tells you the \"new\" (to) value of location.href, and\n      // not the previous (from) value, we need to track the value of the current URL\n      // state ourselves\n      lastHref = to;\n\n      // Use only the path component of the URL if the URL matches the current\n      // document (almost all the time when using pushState)\n      if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        to = parsedTo.relative;\n      }\n      if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        from = parsedFrom.relative;\n      }\n\n      Breadcrumbs.addBreadcrumb({\n        category: 'navigation',\n        data: {\n          from,\n          to,\n        },\n      });\n    };\n\n    // record navigation (URL) changes\n    const oldOnPopState = global.onpopstate;\n    global.onpopstate = (...args: any[]) => {\n      const currentHref = global.location.href;\n      captureUrlChange(lastHref, currentHref);\n      if (oldOnPopState) {\n        return oldOnPopState.apply(this, args);\n      }\n    };\n\n    /** JSDoc */\n    function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n      // note history.pushState.length is 0; intentionally not declaring\n      // params to preserve 0 arity\n      return function(this: History, ...args: any[]): void {\n        const url = args.length > 2 ? args[2] : undefined;\n        // url argument is optional\n        if (url) {\n          // coerce to string (this is what pushState does)\n          captureUrlChange(lastHref, String(url));\n        }\n        return originalHistoryFunction.apply(this, args);\n      };\n    }\n\n    fill(global.history, 'pushState', historyReplacementFunction);\n    fill(global.history, 'replaceState', historyReplacementFunction);\n  }\n\n  /** JSDoc */\n  private instrumentXHR(): void {\n    if (!('XMLHttpRequest' in global)) {\n      return;\n    }\n\n    /** JSDoc */\n    function wrapProp(prop: string, xhr: XMLHttpRequest): void {\n      // TODO: Fix XHR types\n      if (prop in xhr && isFunction((xhr as { [key: string]: any })[prop])) {\n        fill(xhr, prop, original =>\n          wrap(original, {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: (original && original.name) || '<anonymous>',\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n        );\n      }\n    }\n\n    const xhrproto = XMLHttpRequest.prototype;\n    fill(\n      xhrproto,\n      'open',\n      originalOpen =>\n        function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n          const url = args[1];\n          this.__sentry_xhr__ = {\n            method: args[0],\n            url: args[1],\n          };\n\n          const client = getCurrentHub().getClient() as BrowserClient;\n          const dsn = client && client.getDsn();\n          if (dsn) {\n            const filterUrl = new API(dsn).getStoreEndpoint();\n            // if Sentry key appears in URL, don't capture it as a request\n            // but rather as our own 'sentry' type breadcrumb\n            if (isString(url) && (filterUrl && includes(url, filterUrl))) {\n              this.__sentry_own_request__ = true;\n            }\n          }\n\n          return originalOpen.apply(this, args);\n        },\n    );\n\n    fill(\n      xhrproto,\n      'send',\n      originalSend =>\n        function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n          const xhr = this; // tslint:disable-line:no-this-assignment\n\n          if (xhr.__sentry_own_request__) {\n            addSentryBreadcrumb(args[0]);\n          }\n\n          /** JSDoc */\n          function onreadystatechangeHandler(): void {\n            if (xhr.readyState === 4) {\n              if (xhr.__sentry_own_request__) {\n                return;\n              }\n              try {\n                // touching statusCode in some platforms throws\n                // an exception\n                if (xhr.__sentry_xhr__) {\n                  xhr.__sentry_xhr__.status_code = xhr.status;\n                }\n              } catch (e) {\n                /* do nothing */\n              }\n              Breadcrumbs.addBreadcrumb(\n                {\n                  category: 'xhr',\n                  data: xhr.__sentry_xhr__,\n                  type: 'http',\n                },\n                {\n                  xhr,\n                },\n              );\n            }\n          }\n\n          ['onload', 'onerror', 'onprogress'].forEach(prop => {\n            wrapProp(prop, xhr);\n          });\n\n          if ('onreadystatechange' in xhr && isFunction(xhr.onreadystatechange)) {\n            fill(xhr, 'onreadystatechange', function(original: () => void): void {\n              return wrap(\n                original,\n                {\n                  mechanism: {\n                    data: {\n                      function: 'onreadystatechange',\n                      handler: (original && original.name) || '<anonymous>',\n                    },\n                    handled: true,\n                    type: 'instrument',\n                  },\n                },\n                onreadystatechangeHandler,\n              );\n            });\n          } else {\n            // if onreadystatechange wasn't actually set by the page on this xhr, we\n            // are free to set our own and capture the breadcrumb\n            xhr.onreadystatechange = onreadystatechangeHandler;\n          }\n          return originalSend.apply(this, args);\n        },\n    );\n  }\n\n  /**\n   * Helper that checks if integration is enabled on the client.\n   * @param breadcrumb Breadcrumb\n   * @param hint SentryBreadcrumbHint\n   */\n  public static addBreadcrumb(breadcrumb: Breadcrumb, hint?: SentryBreadcrumbHint): void {\n    if (getCurrentHub().getIntegration(Breadcrumbs)) {\n      getCurrentHub().addBreadcrumb(breadcrumb, hint);\n    }\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      this.instrumentConsole();\n    }\n    if (this.options.dom) {\n      this.instrumentDOM();\n    }\n    if (this.options.xhr) {\n      this.instrumentXHR();\n    }\n    if (this.options.fetch) {\n      this.instrumentFetch();\n    }\n    if (this.options.beacon) {\n      this.instrumentBeacon();\n    }\n    if (this.options.history) {\n      this.instrumentHistory();\n    }\n  }\n}\n\n/** JSDoc */\nfunction addSentryBreadcrumb(serializedData: string): void {\n  // There's always something that can go wrong with deserialization...\n  try {\n    const event: { [key: string]: any } = deserialize(serializedData);\n    Breadcrumbs.addBreadcrumb(\n      {\n        category: 'sentry',\n        event_id: event.event_id,\n        level: event.level || Severity.fromString('error'),\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  } catch (_oO) {\n    logger.error('Error while adding sentry type breadcrumb');\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Integration, SentryEvent, SentryEventHint, SentryException } from '@sentry/types';\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/**\n * Just an Error object with arbitrary attributes attached to it.\n */\ninterface ExtendedError extends Error {\n  [key: string]: any;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this.key = options.key || DEFAULT_KEY;\n    this.limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent, hint?: SentryEventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self.handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public handler(event: SentryEvent, hint?: SentryEventHint): SentryEvent | null {\n    if (!event.exception || !event.exception.values || !hint || !(hint.originalException instanceof Error)) {\n      return event;\n    }\n    const linkedErrors = this.walkErrorTree(hint.originalException, this.key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public walkErrorTree(error: ExtendedError, key: string, stack: SentryException[] = []): SentryException[] {\n    if (!(error[key] instanceof Error) || stack.length + 1 >= this.limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this.walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { captureMessage, getCurrentHub, withScope } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\nimport { supportsReportingObserver } from '@sentry/utils/supports';\n\n/** JSDoc */\ninterface Report {\n  [key: string]: any;\n  type: ReportTypes;\n  url: string;\n  body?: ReportBody;\n}\n\n/** JSDoc */\nenum ReportTypes {\n  /** JSDoc */\n  Crash = 'crash',\n  /** JSDoc */\n  Deprecation = 'deprecation',\n  /** JSDoc */\n  Intervention = 'intervention',\n}\n\n/** JSDoc */\ntype ReportBody = CrashReportBody | DeprecationReportBody | InterventionReportBody;\n\n/** JSDoc */\ninterface CrashReportBody {\n  [key: string]: any;\n  crashId: string;\n  reason?: string;\n}\n\n/** JSDoc */\ninterface DeprecationReportBody {\n  [key: string]: any;\n  id: string;\n  anticipatedRemoval?: Date;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** JSDoc */\ninterface InterventionReportBody {\n  [key: string]: any;\n  id: string;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** Reporting API integration - https://w3c.github.io/reporting/ */\nexport class ReportingObserver implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = ReportingObserver.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReportingObserver';\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly options: {\n      types?: ReportTypes[];\n    } = {\n      types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention],\n    },\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!supportsReportingObserver()) {\n      return;\n    }\n\n    const observer = new (getGlobalObject() as {\n      ReportingObserver: any;\n    }).ReportingObserver(this.handler.bind(this), {\n      buffered: true,\n      types: this.options.types,\n    });\n\n    observer.observe();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public handler(reports: Report[]): void {\n    if (!getCurrentHub().getIntegration(ReportingObserver)) {\n      return;\n    }\n    for (const report of reports) {\n      withScope(scope => {\n        scope.setExtra('url', report.url);\n\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          const plainBody: {\n            [key: string]: any;\n          } = {};\n\n          // tslint:disable-next-line:forin\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === ReportTypes.Crash) {\n            const body = report.body as CrashReportBody;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body as DeprecationReportBody | InterventionReportBody;\n            details = body.message || details;\n          }\n        }\n\n        captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Integration, SentryEvent } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\n\nconst global = getGlobalObject() as Window;\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        if (!global.navigator || !global.location) {\n          return event;\n        }\n\n        // HTTP Interface: https://docs.sentry.io/clientdev/interfaces/http/?platform=javascript\n        const request = event.request || {};\n        request.url = request.url || global.location.href;\n        request.headers = request.headers || {};\n        request.headers['User-Agent'] = global.navigator.userAgent;\n\n        return {\n          ...event,\n          request,\n        };\n      }\n      return event;\n    });\n  }\n}\n","import { captureException, captureMessage, getCurrentHub, Scope, withScope } from '@sentry/core';\nimport { Integration, SentryEvent } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { getGlobalObject } from '@sentry/utils/misc';\n\n/** JSDoc */\nexport class Ember implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Ember.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Ember';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly Ember: any; // tslint:disable-line:variable-name\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { Ember?: any } = {}) {\n    this.Ember =\n      options.Ember ||\n      (getGlobalObject() as {\n        Ember: any;\n      }).Ember;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!this.Ember) {\n      logger.error('EmberIntegration is missing an Ember instance');\n      return;\n    }\n\n    const oldOnError = this.Ember.onerror;\n\n    this.Ember.onerror = (error: Error): void => {\n      if (getCurrentHub().getIntegration(Ember)) {\n        withScope(scope => {\n          this.addIntegrationToSdkInfo(scope);\n          captureException(error);\n        });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(this.Ember, error);\n      } else if (this.Ember.testing) {\n        throw error;\n      }\n    };\n\n    this.Ember.RSVP.on(\n      'error',\n      (reason: any): void => {\n        if (getCurrentHub().getIntegration(Ember)) {\n          withScope(scope => {\n            if (reason instanceof Error) {\n              scope.setExtra('context', 'Unhandled Promise error detected');\n              this.addIntegrationToSdkInfo(scope);\n              captureException(reason);\n            } else {\n              scope.setExtra('reason', reason);\n              this.addIntegrationToSdkInfo(scope);\n              captureMessage('Unhandled Promise error detected');\n            }\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Appends SDK integrations\n   * @param scope The scope currently used.\n   */\n  private addIntegrationToSdkInfo(scope: Scope): void {\n    scope.addEventProcessor(async (event: SentryEvent) => {\n      if (event.sdk) {\n        const integrations = event.sdk.integrations || [];\n        event.sdk = {\n          ...event.sdk,\n          integrations: [...integrations, 'ember'],\n        };\n      }\n      return event;\n    });\n  }\n}\n","import { captureException, getCurrentHub, withScope } from '@sentry/core';\nimport { Integration, SentryEvent } from '@sentry/types';\nimport { isPlainObject, isUndefined } from '@sentry/utils/is';\nimport { logger } from '@sentry/utils/logger';\nimport { getGlobalObject } from '@sentry/utils/misc';\n\n/** JSDoc */\ninterface Metadata {\n  [key: string]: any;\n  componentName?: string;\n  propsData?: {\n    [key: string]: any;\n  };\n  lifecycleHook?: string;\n}\n\n/** JSDoc */\nexport class Vue implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Vue.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Vue';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly Vue: any; // tslint:disable-line:variable-name\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { Vue?: any } = {}) {\n    this.Vue =\n      options.Vue ||\n      (getGlobalObject() as {\n        Vue: any;\n      }).Vue;\n  }\n\n  /** JSDoc */\n  private formatComponentName(vm: any): string {\n    if (vm.$root === vm) {\n      return 'root instance';\n    }\n    const name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;\n    return (\n      (name ? `component <${name}>` : 'anonymous component') +\n      (vm._isVue && vm.$options.__file ? ` at ${vm.$options.__file}` : '')\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!this.Vue || !this.Vue.config) {\n      logger.error('VueIntegration is missing a Vue instance');\n      return;\n    }\n\n    const oldOnError = this.Vue.config.errorHandler;\n\n    this.Vue.config.errorHandler = (error: Error, vm: { [key: string]: any }, info: string): void => {\n      const metadata: Metadata = {};\n\n      if (isPlainObject(vm)) {\n        metadata.componentName = this.formatComponentName(vm);\n        metadata.propsData = vm.$options.propsData;\n      }\n\n      if (!isUndefined(info)) {\n        metadata.lifecycleHook = info;\n      }\n\n      if (getCurrentHub().getIntegration(Vue)) {\n        withScope(scope => {\n          Object.keys(metadata).forEach(key => {\n            scope.setExtra(key, metadata[key]);\n          });\n\n          scope.addEventProcessor(async (event: SentryEvent) => {\n            if (event.sdk) {\n              const integrations = event.sdk.integrations || [];\n              event.sdk = {\n                ...event.sdk,\n                integrations: [...integrations, 'vue'],\n              };\n            }\n            return event;\n          });\n\n          captureException(error);\n        });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(this.Vue, error, vm, info);\n      }\n    };\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { BrowserOptions } from './backend';\nimport { BrowserClient, ReportDialogOptions } from './client';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  // Common\n  new CoreIntegrations.Dedupe(),\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new CoreIntegrations.ExtraErrorData(),\n  // Native Wrappers\n  new TryCatch(),\n  new Breadcrumbs(),\n  // Global Handlers\n  new GlobalHandlers(),\n  // Misc\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n * @example\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n *\n * @example\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see BrowserOptions for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  initAndBind(BrowserClient, options);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  (getCurrentHub().getClient() as BrowserClient).showReportDialog(options);\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n","export {\n  Breadcrumb,\n  Request,\n  SdkInfo,\n  SentryEvent,\n  SentryException,\n  SentryResponse,\n  Severity,\n  StackFrame,\n  Stacktrace,\n  Status,\n  Thread,\n  User,\n} from '@sentry/types';\n\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  withScope,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  Scope,\n} from '@sentry/core';\n\nexport { BrowserBackend, BrowserOptions } from './backend';\nexport { BrowserClient, ReportDialogOptions } from './client';\nexport { defaultIntegrations, forceLoad, init, lastEventId, onLoad, showReportDialog } from './sdk';\nexport { SDK_NAME, SDK_VERSION } from './version';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nconst INTEGRATIONS = {\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","import { getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils/logger';\nimport { Client, Options } from './interfaces';\n\n/** A class object that can instanciate Client objects. */\nexport interface ClientClass<F extends Client, O extends Options> {\n  new (options: O): F;\n}\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n * @returns The installed and bound client instance.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n\n  if (getCurrentHub().getClient()) {\n    return;\n  }\n\n  const client = new clientClass(options);\n  getCurrentHub().bindClient(client);\n  client.install();\n}\n"],"names":["Severity","Status","isError","wat","Object","prototype","toString","call","Error","isErrorEvent","isDOMError","isUndefined","isFunction","isString","isPrimitive","isArray","isPlainObject","isNaN","getGlobalObject","process","global","window","self","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","length","replace","c","r","Math","random","htmlElementAsString","elem","className","classes","key","attr","i","out","tagName","push","toLowerCase","id","split","attrWhitelist","getAttribute","join","parseUrl","url","match","query","fragment","host","path","protocol","relative","getEventDescription","event","message","exception","values","type","value","event_id","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","level","__sentry__","__sentry_wrapped__","__sentry_original__","result","keys","Debug","Info","Warning","Fatal","Critical","Log","code","Success","RateLimit","Invalid","Failed","Unknown","this","hasWeakSet","WeakSet","inner","Memo","obj","has","add","_b","tslib_1.__values","delete","splice","truncate","str","max","substr","safeJoin","input","delimiter","Array","output","String","e","includes","target","search","indexOf","serialize","object","JSON","stringify","serializer","normalize","fill","source","name","replacement","original","wrapped","defineProperties","enumerable","MAX_SERIALIZE_EXCEPTION_DEPTH","MAX_SERIALIZE_EXCEPTION_SIZE","MAX_SERIALIZE_KEYS_LENGTH","jsonSize","encodeURI","utf8Length","serializeValue","normalizeValue","serializeObject","depth","serialized_1","val_1","map","assign","_i","args","undefined","TypeError","to","nextKey","hasOwnProperty","_events","document","Date","error","err","stack","objectifyError","Event","getPrototypeOf","constructor","decycle","memo","copy","memoize","unmemoize","options","safeNormalize","parse","_oO","Scope","scopeListeners","eventProcessors","notifyingListeners","setTimeout","_this","hint","processedEvent","getGlobalEventProcessors","processor","_d","user","notifyScopeListeners","tags","extra","fingerprint","scope","newScope","breadcrumbs","breadcrumb","maxBreadcrumbs","tslib_1.__spread","slice","concat","applyFingerprint","notifyEventProcessors","__SENTRY__","globalEventProcessors","addGlobalEventProcessor","logger","enabled","Logger","log","warn","API_VERSION","client","version","Hub","method","top","getStackTop","_a","catch","addScopeListener","s","getBackend","storeScope","getStack","parentScope","clone","getClient","pop","pushScope","popScope","eventId","_lastEventId","invokeClientAsync","invokeClient","oldHub","makeMain","integration","getIntegration","getMainCarrier","carrier","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","mod","request","hasHubOnCarrier","isOlderThan","activeDomain","module","require","active","registryHubTopStack","_Oo","callOnHub","captureException","syntheticException","originalException","captureMessage","withScope","_super","_newTarget","setPrototypeOf","tslib_1.__extends","DSN_REGEX","from","fromString","fromComponents","validate","Dsn","withPassword","pass","port","projectId","exec","SentryError","_c","components","component","parseInt","dsn","dsnObject","API","getBaseUrl","getStoreEndpointPath","auth","sentry_key","sentry_version","getStoreEndpoint","encodeURIComponent","clientName","clientVersion","header","getTime","Content-Type","X-Sentry-Auth","dialogOptions","endpoint","encodedOptions","email","installedIntegrations","setupIntegrations","integrations","defaultIntegrations","userIntegrations","userIntegrationsNames","pickedIntegrationsNames","defaultIntegrations_1","defaultIntegration","getIntegrationName","userIntegrations_1","userIntegration","getIntegrationsToSetup","setupOnce","install","setupIntegration","LogLevel","limit","PromiseBuffer","task","isReady","buffer","then","remove","Promise","reject","timeout","resolve","capturedSetTimeout","all","clearTimeout","backendClass","backend","BaseClient","isEnabled","installed","eventFromException","captureEvent","eventFromMessage","processEvent","finalEvent","sendEvent","beforeBreadcrumb","timestamp","mergedBreadcrumb","finalBreadcrumb","storeBreadcrumb","addBreadcrumb","min","getOptions","environment","release","dist","prepared","applyToEvent","send","beforeSend","sampleRate","status","Skipped","prepareEvent","data","exception_1","reason","response","error_1","getTransport","close","drain","reduce","prev","current","NoopTransport","_","transport","setupTransport","BaseBackend","_exception","_hint","_message","_level","originalFunctionToString","Dedupe","currentEvent","shouldDropEvent","previousEvent","isSameMessageEvent","isSameExceptionEvent","currentMessage","previousMessage","isSameFingerprint","isSameStacktrace","stacktrace","frames","currentFrames","getFramesFromEvent","previousFrames","frameA","frameB","filename","lineno","colno","function","previousException","getExceptionFromEvent","currentException","currentFingerprint","previousFingerprint","FunctionToString","Function","context","apply","SDKInformation","DEFAULT_IGNORE_ERRORS","InboundFilters","clientOptions","mergeOptions","isSentryError","isIgnoredError","isBlacklistedUrl","getEventFilterUrl","isWhitelistedUrl","ignoreInternal","ignoreErrors","getPossibleEventMessages","some","pattern","isMatchingPattern","blacklistUrls","whitelistUrls","test","oO","ExtraErrorData","enhanceEventWithErrorData","errorData","extractErrorData","normalizedErrorData","nativeKeys_1","name_1","errorKeys","getOwnPropertyNames","filter","extraErrorInfo","errorKeys_1","debugger","splitPathRe","resolvedPath","resolvedAbsolute","charAt","parts","allowAboveRoot","up","last","unshift","normalizeArray","p","trim","start","end","basename","ext","f","RewriteFrames","frame","startsWith","base","root","fromParts","toParts","samePartsLength","outputParts","iteratee","_e","supportsFetch","Headers","Request","Response","supportsBeacon","navigator","safeAdd","x","y","lsw","md5cmn","q","a","b","t","cnt","md5ff","d","md5gg","md5hh","md5ii","binlMD5","len","olda","oldb","oldc","oldd","binl2rstr","length32","fromCharCode","rstr2binl","length8","charCodeAt","rstr2hex","str2rstrUTF8","unescape","rawMD5","rstrMD5","rawHMACMD5","k","hash","bkey","ipad","opad","rstrHMACMD5","md5","string","raw","TraceKit","wrap","report","collectWindowErrors","computeStackTrace","remoteFetching","linesOfContext","extendToAsynchronousCallbacks","_slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","_has","getLocationHref","location","href","func","arguments","_oldOnerrorHandler","_onErrorHandlerInstalled","_oldOnunhandledrejectionHandler","_onUnhandledRejectionHandlerInstalled","handlers","lastException","lastExceptionStack","notifyHandlers","isWindowError","traceKitWindowOnError","lineNo","columnNo","errorObj","augmentStackTraceWithInitialElement","processLastException","mechanism","line","column","msg","groups","guessFunctionName","gatherContext","mode","traceKitWindowOnUnhandledRejection","detail","_lastExceptionStack","_lastException","ex","incomplete","subscribe","handler","unsubscribe","onerror","onunhandledrejection","installGlobalHandler","installGlobalUnhandledRejectionHandler","debug","sourceCache","getSource","domain","XMLHttpRequest","ActiveXObject","getXHR","open","responseText","loadSource","m","reFunctionArgNames","reGuessFunction","linesBefore","floor","linesAfter","escapeRegExp","text","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","substring","index","lastIndexOf","findSourceInLine","RegExp","findSourceByFunctionBody","scripts","getElementsByTagName","script","src","computeStackTraceFromStackProp","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","columnNumber","xhr","sourceMaps","sourceMapAddress","origin","hostname","stackInfo","initial","partial","computeStackTraceByWalkingCallerChain","item","functionName","funcs","recursion","curr","caller","description","sourceURL","fileName","lineNumber","opera10Regex","opera11Regex","exc","computeStackTraceFromStacktraceProp","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","relativeLine","pos","innerText","midline","computeStackTraceFromOperaMultiLineMessage","ofCaller","_helper","fnName","originalFn","originalCallback","STACKTRACE_LIMIT","exceptionFromStacktrace","prepareFramesForEvent","eventFromPlainObject","exceptionKeys","sort","__serialized__","limitObjectDepthToSize","maxSize","serialized","maxLength","includedKeys","serializeKeysToEventMessage","frames_1","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","in_app","reverse","addExceptionTypeValue","keypressTimeout","lastCapturedEvent","getStoreEndpointWithUrlEncodedAuth","BaseTransport","FetchTransport","defaultOptions","referrerPolicy","supportsReferrerPolicy","fetch","fromHttpCode","XHRTransport","onreadystatechange","readyState","BeaconTransport","sendBeacon","BrowserBackend","stackTraceLimit","transportOptions","handled","attachStacktrace","SDK_NAME","BrowserClient","platform","sdk","packages","getDsn","createElement","async","getReportDialogEndpoint","head","appendChild","debounceDuration","ignoreOnError","fn","before","sentryWrapped","wrappedArguments","arg","handleEvent","addEventProcessor","property","defineProperty","breadcrumbEventHandler","eventName","nextStr","currentElem","height","sepLength","parentNode","htmlTreeAsString","category","keypressEventHandler","isContentEditable","GlobalHandlers","eventFromGlobalHandler","newEvent","TryCatch","getFunctionName","proto","bind","clickHandler","keypressHandler","eventType","wrapTimeFunction","wrapRAF","wrapEventTarget","lastHref","Breadcrumbs","beacon","dom","history","sentry","originalBeaconFunction","filterUrl","addSentryBreadcrumb","breadcrumbData","originalConsoleLevel","addEventListener","originalFetch","fetchInput","fetchData","status_code","isChromePackagedApp","app","runtime","hasHistoryApi","pushState","replaceState","captureUrlChange","parsedLoc","parsedTo","parsedFrom","oldOnPopState","onpopstate","currentHref","historyReplacementFunction","originalHistoryFunction","xhrproto","originalOpen","__sentry_xhr__","__sentry_own_request__","originalSend","onreadystatechangeHandler","prop","wrapProp","instrumentConsole","instrumentDOM","instrumentXHR","instrumentFetch","instrumentBeacon","instrumentHistory","serializedData","event_1","ReportTypes","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","linkedErrors","walkErrorTree","UserAgent","headers","userAgent","Ember","oldOnError","addIntegrationToSdkInfo","testing","RSVP","on","setExtra","Vue","vm","$root","_isVue","$options","_componentTag","__file","config","errorHandler","info","metadata","componentName","formatComponentName","propsData","lifecycleHook","types","Crash","Deprecation","Intervention","ReportingObserver","buffered","observe","reports","label","details","plainBody","crashId","reports_1","CoreIntegrations.Dedupe","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","CoreIntegrations.ExtraErrorData","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","clientClass","enable","bindClient","initAndBind","lastEventId","showReportDialog"],"mappings":"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"}